{
  "version": 3,
  "sources": ["../../@stomp/stompjs/src/augment-websocket.ts", "../../@stomp/stompjs/src/byte.ts", "../../@stomp/stompjs/src/frame-impl.ts", "../../@stomp/stompjs/src/parser.ts", "../../@stomp/stompjs/src/types.ts", "../../@stomp/stompjs/src/ticker.ts", "../../@stomp/stompjs/src/versions.ts", "../../@stomp/stompjs/src/stomp-handler.ts", "../../@stomp/stompjs/src/client.ts", "../../@stomp/stompjs/src/stomp-config.ts", "../../@stomp/stompjs/src/stomp-headers.ts", "../../@stomp/stompjs/src/compatibility/heartbeat-info.ts", "../../@stomp/stompjs/src/compatibility/compat-client.ts", "../../@stomp/stompjs/src/compatibility/stomp.ts"],
  "sourcesContent": ["import { IStompSocket } from './types.js';\r\n\r\n/**\r\n * @internal\r\n */\r\nexport function augmentWebsocket(\r\n  webSocket: IStompSocket,\r\n  debug: (msg: string) => void\r\n) {\r\n  webSocket.terminate = function () {\r\n    const noOp = () => {};\r\n\r\n    // set all callbacks to no op\r\n    this.onerror = noOp;\r\n    this.onmessage = noOp;\r\n    this.onopen = noOp;\r\n\r\n    const ts = new Date();\r\n    const id = Math.random().toString().substring(2, 8); // A simulated id\r\n\r\n    const origOnClose = this.onclose;\r\n\r\n    // Track delay in actual closure of the socket\r\n    this.onclose = closeEvent => {\r\n      const delay = new Date().getTime() - ts.getTime();\r\n      debug(\r\n        `Discarded socket (#${id})  closed after ${delay}ms, with code/reason: ${closeEvent.code}/${closeEvent.reason}`\r\n      );\r\n    };\r\n\r\n    this.close();\r\n\r\n    origOnClose?.call(webSocket, {\r\n      code: 4001,\r\n      reason: `Quick discarding socket (#${id}) without waiting for the shutdown sequence.`,\r\n      wasClean: false,\r\n    });\r\n  };\r\n}\r\n", "/**\r\n * Some byte values, used as per STOMP specifications.\r\n *\r\n * Part of `@stomp/stompjs`.\r\n *\r\n * @internal\r\n */\r\nexport const BYTE = {\r\n  // LINEFEED byte (octet 10)\r\n  LF: '\\x0A',\r\n  // NULL byte (octet 0)\r\n  NULL: '\\x00',\r\n};\r\n", "import { BYTE } from './byte.js';\r\nimport type { IFrame } from './i-frame.js';\r\nimport { StompHeaders } from './stomp-headers.js';\r\nimport { IRawFrameType } from './types.js';\r\n\r\n/**\r\n * Frame class represents a STOMP frame.\r\n *\r\n * @internal\r\n */\r\nexport class FrameImpl implements IFrame {\r\n  /**\r\n   * STOMP Command\r\n   */\r\n  public command: string;\r\n\r\n  /**\r\n   * Headers, key value pairs.\r\n   */\r\n  public headers: StompHeaders;\r\n\r\n  /**\r\n   * Is this frame binary (based on whether body/binaryBody was passed when creating this frame).\r\n   */\r\n  public isBinaryBody: boolean;\r\n\r\n  /**\r\n   * body of the frame\r\n   */\r\n  get body(): string {\r\n    if (!this._body && this.isBinaryBody) {\r\n      this._body = new TextDecoder().decode(this._binaryBody);\r\n    }\r\n    return this._body || '';\r\n  }\r\n  private _body: string | undefined;\r\n\r\n  /**\r\n   * body as Uint8Array\r\n   */\r\n  get binaryBody(): Uint8Array {\r\n    if (!this._binaryBody && !this.isBinaryBody) {\r\n      this._binaryBody = new TextEncoder().encode(this._body);\r\n    }\r\n    // At this stage it will definitely have a valid value\r\n    return this._binaryBody as Uint8Array;\r\n  }\r\n  private _binaryBody: Uint8Array | undefined;\r\n\r\n  private escapeHeaderValues: boolean;\r\n  private skipContentLengthHeader: boolean;\r\n\r\n  /**\r\n   * Frame constructor. `command`, `headers` and `body` are available as properties.\r\n   *\r\n   * @internal\r\n   */\r\n  constructor(params: {\r\n    command: string;\r\n    headers?: StompHeaders;\r\n    body?: string;\r\n    binaryBody?: Uint8Array;\r\n    escapeHeaderValues?: boolean;\r\n    skipContentLengthHeader?: boolean;\r\n  }) {\r\n    const {\r\n      command,\r\n      headers,\r\n      body,\r\n      binaryBody,\r\n      escapeHeaderValues,\r\n      skipContentLengthHeader,\r\n    } = params;\r\n    this.command = command;\r\n    this.headers = (Object as any).assign({}, headers || {});\r\n\r\n    if (binaryBody) {\r\n      this._binaryBody = binaryBody;\r\n      this.isBinaryBody = true;\r\n    } else {\r\n      this._body = body || '';\r\n      this.isBinaryBody = false;\r\n    }\r\n    this.escapeHeaderValues = escapeHeaderValues || false;\r\n    this.skipContentLengthHeader = skipContentLengthHeader || false;\r\n  }\r\n\r\n  /**\r\n   * deserialize a STOMP Frame from raw data.\r\n   *\r\n   * @internal\r\n   */\r\n  public static fromRawFrame(\r\n    rawFrame: IRawFrameType,\r\n    escapeHeaderValues: boolean\r\n  ): FrameImpl {\r\n    const headers: StompHeaders = {};\r\n    const trim = (str: string): string => str.replace(/^\\s+|\\s+$/g, '');\r\n\r\n    // In case of repeated headers, as per standards, first value need to be used\r\n    for (const header of rawFrame.headers.reverse()) {\r\n      const idx = header.indexOf(':');\r\n\r\n      const key = trim(header[0]);\r\n      let value = trim(header[1]);\r\n\r\n      if (\r\n        escapeHeaderValues &&\r\n        rawFrame.command !== 'CONNECT' &&\r\n        rawFrame.command !== 'CONNECTED'\r\n      ) {\r\n        value = FrameImpl.hdrValueUnEscape(value);\r\n      }\r\n\r\n      headers[key] = value;\r\n    }\r\n\r\n    return new FrameImpl({\r\n      command: rawFrame.command as string,\r\n      headers,\r\n      binaryBody: rawFrame.binaryBody,\r\n      escapeHeaderValues,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  public toString(): string {\r\n    return this.serializeCmdAndHeaders();\r\n  }\r\n\r\n  /**\r\n   * serialize this Frame in a format suitable to be passed to WebSocket.\r\n   * If the body is string the output will be string.\r\n   * If the body is binary (i.e. of type Unit8Array) it will be serialized to ArrayBuffer.\r\n   *\r\n   * @internal\r\n   */\r\n  public serialize(): string | ArrayBuffer {\r\n    const cmdAndHeaders = this.serializeCmdAndHeaders();\r\n\r\n    if (this.isBinaryBody) {\r\n      return FrameImpl.toUnit8Array(\r\n        cmdAndHeaders,\r\n        this._binaryBody as Uint8Array\r\n      ).buffer;\r\n    } else {\r\n      return cmdAndHeaders + this._body + BYTE.NULL;\r\n    }\r\n  }\r\n\r\n  private serializeCmdAndHeaders(): string {\r\n    const lines = [this.command];\r\n    if (this.skipContentLengthHeader) {\r\n      delete this.headers['content-length'];\r\n    }\r\n\r\n    for (const name of Object.keys(this.headers || {})) {\r\n      const value = this.headers[name];\r\n      if (\r\n        this.escapeHeaderValues &&\r\n        this.command !== 'CONNECT' &&\r\n        this.command !== 'CONNECTED'\r\n      ) {\r\n        lines.push(`${name}:${FrameImpl.hdrValueEscape(`${value}`)}`);\r\n      } else {\r\n        lines.push(`${name}:${value}`);\r\n      }\r\n    }\r\n    if (\r\n      this.isBinaryBody ||\r\n      (!this.isBodyEmpty() && !this.skipContentLengthHeader)\r\n    ) {\r\n      lines.push(`content-length:${this.bodyLength()}`);\r\n    }\r\n    return lines.join(BYTE.LF) + BYTE.LF + BYTE.LF;\r\n  }\r\n\r\n  private isBodyEmpty(): boolean {\r\n    return this.bodyLength() === 0;\r\n  }\r\n\r\n  private bodyLength(): number {\r\n    const binaryBody = this.binaryBody;\r\n    return binaryBody ? binaryBody.length : 0;\r\n  }\r\n\r\n  /**\r\n   * Compute the size of a UTF-8 string by counting its number of bytes\r\n   * (and not the number of characters composing the string)\r\n   */\r\n  private static sizeOfUTF8(s: string): number {\r\n    return s ? new TextEncoder().encode(s).length : 0;\r\n  }\r\n\r\n  private static toUnit8Array(\r\n    cmdAndHeaders: string,\r\n    binaryBody: Uint8Array\r\n  ): Uint8Array {\r\n    const uint8CmdAndHeaders = new TextEncoder().encode(cmdAndHeaders);\r\n    const nullTerminator = new Uint8Array([0]);\r\n    const uint8Frame = new Uint8Array(\r\n      uint8CmdAndHeaders.length + binaryBody.length + nullTerminator.length\r\n    );\r\n\r\n    uint8Frame.set(uint8CmdAndHeaders);\r\n    uint8Frame.set(binaryBody, uint8CmdAndHeaders.length);\r\n    uint8Frame.set(\r\n      nullTerminator,\r\n      uint8CmdAndHeaders.length + binaryBody.length\r\n    );\r\n\r\n    return uint8Frame;\r\n  }\r\n  /**\r\n   * Serialize a STOMP frame as per STOMP standards, suitable to be sent to the STOMP broker.\r\n   *\r\n   * @internal\r\n   */\r\n  public static marshall(params: {\r\n    command: string;\r\n    headers?: StompHeaders;\r\n    body?: string;\r\n    binaryBody?: Uint8Array;\r\n    escapeHeaderValues?: boolean;\r\n    skipContentLengthHeader?: boolean;\r\n  }) {\r\n    const frame = new FrameImpl(params);\r\n    return frame.serialize();\r\n  }\r\n\r\n  /**\r\n   *  Escape header values\r\n   */\r\n  private static hdrValueEscape(str: string): string {\r\n    return str\r\n      .replace(/\\\\/g, '\\\\\\\\')\r\n      .replace(/\\r/g, '\\\\r')\r\n      .replace(/\\n/g, '\\\\n')\r\n      .replace(/:/g, '\\\\c');\r\n  }\r\n\r\n  /**\r\n   * UnEscape header values\r\n   */\r\n  private static hdrValueUnEscape(str: string): string {\r\n    return str\r\n      .replace(/\\\\r/g, '\\r')\r\n      .replace(/\\\\n/g, '\\n')\r\n      .replace(/\\\\c/g, ':')\r\n      .replace(/\\\\\\\\/g, '\\\\');\r\n  }\r\n}\r\n", "import { IRawFrameType } from './types.js';\r\n\r\n/**\r\n * @internal\r\n */\r\nconst NULL = 0;\r\n/**\r\n * @internal\r\n */\r\nconst LF = 10;\r\n/**\r\n * @internal\r\n */\r\nconst CR = 13;\r\n/**\r\n * @internal\r\n */\r\nconst COLON = 58;\r\n\r\n/**\r\n * This is an evented, rec descent parser.\r\n * A stream of Octets can be passed and whenever it recognizes\r\n * a complete Frame or an incoming ping it will invoke the registered callbacks.\r\n *\r\n * All incoming Octets are fed into _onByte function.\r\n * Depending on current state the _onByte function keeps changing.\r\n * Depending on the state it keeps accumulating into _token and _results.\r\n * State is indicated by current value of _onByte, all states are named as _collect.\r\n *\r\n * STOMP standards https://stomp.github.io/stomp-specification-1.2.html\r\n * imply that all lengths are considered in bytes (instead of string lengths).\r\n * So, before actual parsing, if the incoming data is String it is converted to Octets.\r\n * This allows faithful implementation of the protocol and allows NULL Octets to be present in the body.\r\n *\r\n * There is no peek function on the incoming data.\r\n * When a state change occurs based on an Octet without consuming the Octet,\r\n * the Octet, after state change, is fed again (_reinjectByte).\r\n * This became possible as the state change can be determined by inspecting just one Octet.\r\n *\r\n * There are two modes to collect the body, if content-length header is there then it by counting Octets\r\n * otherwise it is determined by NULL terminator.\r\n *\r\n * Following the standards, the command and headers are converted to Strings\r\n * and the body is returned as Octets.\r\n * Headers are returned as an array and not as Hash - to allow multiple occurrence of an header.\r\n *\r\n * This parser does not use Regular Expressions as that can only operate on Strings.\r\n *\r\n * It handles if multiple STOMP frames are given as one chunk, a frame is split into multiple chunks, or\r\n * any combination there of. The parser remembers its state (any partial frame) and continues when a new chunk\r\n * is pushed.\r\n *\r\n * Typically the higher level function will convert headers to Hash, handle unescaping of header values\r\n * (which is protocol version specific), and convert body to text.\r\n *\r\n * Check the parser.spec.js to understand cases that this parser is supposed to handle.\r\n *\r\n * Part of `@stomp/stompjs`.\r\n *\r\n * @internal\r\n */\r\nexport class Parser {\r\n  private readonly _encoder = new TextEncoder();\r\n  private readonly _decoder = new TextDecoder();\r\n\r\n  // @ts-ignore - it always has a value\r\n  private _results: IRawFrameType;\r\n\r\n  private _token: number[] = [];\r\n  private _headerKey: string | undefined;\r\n  private _bodyBytesRemaining: number | undefined;\r\n\r\n  // @ts-ignore - it always has a value\r\n  private _onByte: (byte: number) => void;\r\n\r\n  public constructor(\r\n    public onFrame: (rawFrame: IRawFrameType) => void,\r\n    public onIncomingPing: () => void\r\n  ) {\r\n    this._initState();\r\n  }\r\n\r\n  public parseChunk(\r\n    segment: string | ArrayBuffer,\r\n    appendMissingNULLonIncoming: boolean = false\r\n  ) {\r\n    let chunk: Uint8Array;\r\n\r\n    if (typeof segment === 'string') {\r\n      chunk = this._encoder.encode(segment);\r\n    } else {\r\n      chunk = new Uint8Array(segment);\r\n    }\r\n\r\n    // See https://github.com/stomp-js/stompjs/issues/89\r\n    // Remove when underlying issue is fixed.\r\n    //\r\n    // Send a NULL byte, if the last byte of a Text frame was not NULL.F\r\n    if (appendMissingNULLonIncoming && chunk[chunk.length - 1] !== 0) {\r\n      const chunkWithNull = new Uint8Array(chunk.length + 1);\r\n      chunkWithNull.set(chunk, 0);\r\n      chunkWithNull[chunk.length] = 0;\r\n      chunk = chunkWithNull;\r\n    }\r\n\r\n    // tslint:disable-next-line:prefer-for-of\r\n    for (let i = 0; i < chunk.length; i++) {\r\n      const byte = chunk[i];\r\n      this._onByte(byte);\r\n    }\r\n  }\r\n\r\n  // The following implements a simple Rec Descent Parser.\r\n  // The grammar is simple and just one byte tells what should be the next state\r\n\r\n  private _collectFrame(byte: number): void {\r\n    if (byte === NULL) {\r\n      // Ignore\r\n      return;\r\n    }\r\n    if (byte === CR) {\r\n      // Ignore CR\r\n      return;\r\n    }\r\n    if (byte === LF) {\r\n      // Incoming Ping\r\n      this.onIncomingPing();\r\n      return;\r\n    }\r\n\r\n    this._onByte = this._collectCommand;\r\n    this._reinjectByte(byte);\r\n  }\r\n\r\n  private _collectCommand(byte: number): void {\r\n    if (byte === CR) {\r\n      // Ignore CR\r\n      return;\r\n    }\r\n    if (byte === LF) {\r\n      this._results.command = this._consumeTokenAsUTF8();\r\n      this._onByte = this._collectHeaders;\r\n      return;\r\n    }\r\n\r\n    this._consumeByte(byte);\r\n  }\r\n\r\n  private _collectHeaders(byte: number): void {\r\n    if (byte === CR) {\r\n      // Ignore CR\r\n      return;\r\n    }\r\n    if (byte === LF) {\r\n      this._setupCollectBody();\r\n      return;\r\n    }\r\n    this._onByte = this._collectHeaderKey;\r\n    this._reinjectByte(byte);\r\n  }\r\n\r\n  private _reinjectByte(byte: number) {\r\n    this._onByte(byte);\r\n  }\r\n\r\n  private _collectHeaderKey(byte: number): void {\r\n    if (byte === COLON) {\r\n      this._headerKey = this._consumeTokenAsUTF8();\r\n      this._onByte = this._collectHeaderValue;\r\n      return;\r\n    }\r\n    this._consumeByte(byte);\r\n  }\r\n\r\n  private _collectHeaderValue(byte: number): void {\r\n    if (byte === CR) {\r\n      // Ignore CR\r\n      return;\r\n    }\r\n    if (byte === LF) {\r\n      this._results.headers.push([\r\n        this._headerKey as string,\r\n        this._consumeTokenAsUTF8(),\r\n      ]);\r\n      this._headerKey = undefined;\r\n      this._onByte = this._collectHeaders;\r\n      return;\r\n    }\r\n    this._consumeByte(byte);\r\n  }\r\n\r\n  private _setupCollectBody() {\r\n    const contentLengthHeader = this._results.headers.filter(\r\n      (header: [string, string]) => {\r\n        return header[0] === 'content-length';\r\n      }\r\n    )[0];\r\n\r\n    if (contentLengthHeader) {\r\n      this._bodyBytesRemaining = parseInt(contentLengthHeader[1], 10);\r\n      this._onByte = this._collectBodyFixedSize;\r\n    } else {\r\n      this._onByte = this._collectBodyNullTerminated;\r\n    }\r\n  }\r\n\r\n  private _collectBodyNullTerminated(byte: number): void {\r\n    if (byte === NULL) {\r\n      this._retrievedBody();\r\n      return;\r\n    }\r\n    this._consumeByte(byte);\r\n  }\r\n\r\n  private _collectBodyFixedSize(byte: number): void {\r\n    // It is post decrement, so that we discard the trailing NULL octet\r\n    if ((this._bodyBytesRemaining as number)-- === 0) {\r\n      this._retrievedBody();\r\n      return;\r\n    }\r\n    this._consumeByte(byte);\r\n  }\r\n\r\n  private _retrievedBody() {\r\n    this._results.binaryBody = this._consumeTokenAsRaw();\r\n\r\n    try {\r\n      this.onFrame(this._results);\r\n    } catch (e) {\r\n      console.log(\r\n        `Ignoring an exception thrown by a frame handler. Original exception: `,\r\n        e\r\n      );\r\n    }\r\n\r\n    this._initState();\r\n  }\r\n\r\n  // Rec Descent Parser helpers\r\n\r\n  private _consumeByte(byte: number) {\r\n    this._token.push(byte);\r\n  }\r\n\r\n  private _consumeTokenAsUTF8() {\r\n    return this._decoder.decode(this._consumeTokenAsRaw());\r\n  }\r\n\r\n  private _consumeTokenAsRaw() {\r\n    const rawResult = new Uint8Array(this._token);\r\n    this._token = [];\r\n    return rawResult;\r\n  }\r\n\r\n  private _initState() {\r\n    this._results = {\r\n      command: undefined,\r\n      headers: [],\r\n      binaryBody: undefined,\r\n    };\r\n\r\n    this._token = [];\r\n    this._headerKey = undefined;\r\n\r\n    this._onByte = this._collectFrame;\r\n  }\r\n}\r\n", "import type { IFrame } from './i-frame.js';\r\nimport type { IMessage } from './i-message.js';\r\nimport { StompHeaders } from './stomp-headers.js';\r\nimport { Versions } from './versions.js';\r\n\r\n/**\r\n * This callback will receive a `string` as a parameter.\r\n *\r\n * Part of `@stomp/stompjs`.\r\n */\r\nexport type debugFnType = (msg: string) => void;\r\n\r\n/**\r\n * This callback will receive a {@link IMessage} as parameter.\r\n *\r\n * Part of `@stomp/stompjs`.\r\n */\r\nexport type messageCallbackType = (message: IMessage) => void;\r\n\r\n/**\r\n * This callback will receive a {@link IFrame} as parameter.\r\n *\r\n * Part of `@stomp/stompjs`.\r\n */\r\nexport type frameCallbackType = ((frame: IFrame) => void) | (() => void);\r\n\r\n/**\r\n * This callback will receive a [CloseEvent]{@link https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent}\r\n * as parameter.\r\n *\r\n * Part of `@stomp/stompjs`.\r\n */\r\nexport type closeEventCallbackType<T = any> = (evt: T) => void;\r\n\r\n/**\r\n * This callback will receive an [Event]{@link https://developer.mozilla.org/en-US/docs/Web/API/Event}\r\n * as parameter.\r\n *\r\n * Part of `@stomp/stompjs`.\r\n */\r\nexport type wsErrorCallbackType<T = any> = (evt: T) => void;\r\n\r\n/**\r\n * Parameters for [Client#publish]{@link Client#publish}.\r\n * Aliased as publishParams as well.\r\n *\r\n * Part of `@stomp/stompjs`.\r\n */\r\nexport interface IPublishParams {\r\n  /**\r\n   * destination end point\r\n   */\r\n  destination: string;\r\n  /**\r\n   * headers (optional)\r\n   */\r\n  headers?: StompHeaders;\r\n  /**\r\n   * body (optional)\r\n   */\r\n  body?: string;\r\n  /**\r\n   * binary body (optional)\r\n   */\r\n  binaryBody?: Uint8Array;\r\n  /**\r\n   * By default, a `content-length` header will be added in the Frame to the broker.\r\n   * Set it to `true` for the header to be skipped.\r\n   */\r\n  skipContentLengthHeader?: boolean;\r\n}\r\n\r\n/**\r\n * Backward compatibility, switch to {@link IPublishParams}.\r\n */\r\nexport type publishParams = IPublishParams;\r\n\r\n/**\r\n * Used in {@link IRawFrameType}\r\n *\r\n * Part of `@stomp/stompjs`.\r\n *\r\n * @internal\r\n */\r\nexport type RawHeaderType = [string, string];\r\n\r\n/**\r\n * The parser yield frames in this structure\r\n *\r\n * Part of `@stomp/stompjs`.\r\n *\r\n * @internal\r\n */\r\nexport interface IRawFrameType {\r\n  command: string | undefined;\r\n  headers: RawHeaderType[];\r\n  binaryBody: Uint8Array | undefined;\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport interface IStompSocketMessageEvent {\r\n  data?: string | ArrayBuffer;\r\n}\r\n\r\n/**\r\n * Copied from Websocket interface to avoid dom typelib dependency.\r\n *\r\n * @internal\r\n */\r\nexport interface IStompSocket {\r\n  url: string;\r\n  onclose: ((ev?: any) => any) | undefined | null;\r\n  onerror: ((ev: any) => any) | undefined | null;\r\n  onmessage: ((ev: IStompSocketMessageEvent) => any) | undefined | null;\r\n  onopen: ((ev?: any) => any) | undefined | null;\r\n  terminate?: (() => any) | undefined | null;\r\n\r\n  /**\r\n   * Returns a string that indicates how binary data from the socket is exposed to scripts:\r\n   * We support only 'arraybuffer'.\r\n   */\r\n  binaryType?: string;\r\n\r\n  /**\r\n   * Returns the state of the socket connection. It can have the values of StompSocketState.\r\n   */\r\n  readonly readyState: number;\r\n\r\n  /**\r\n   * Closes the connection.\r\n   */\r\n  close(): void;\r\n  /**\r\n   * Transmits data using the connection. data can be a string or an ArrayBuffer.\r\n   */\r\n  send(data: string | ArrayBuffer): void;\r\n}\r\n\r\n/**\r\n * Possible states for the IStompSocket\r\n */\r\nexport enum StompSocketState {\r\n  CONNECTING,\r\n  OPEN,\r\n  CLOSING,\r\n  CLOSED,\r\n}\r\n\r\n/**\r\n * Possible activation state\r\n */\r\nexport enum ActivationState {\r\n  ACTIVE,\r\n  DEACTIVATING,\r\n  INACTIVE,\r\n}\r\n\r\n/**\r\n * Possible reconnection wait time modes\r\n */\r\nexport enum ReconnectionTimeMode {\r\n  LINEAR,\r\n  EXPONENTIAL\r\n}\r\n\r\n/**\r\n * Possible ticker strategies for outgoing heartbeat ping\r\n */\r\nexport enum TickerStrategy {\r\n  Interval = 'interval',\r\n  Worker = 'worker'\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport interface IStomptHandlerConfig {\r\n  debug: debugFnType;\r\n  stompVersions: Versions;\r\n  connectHeaders: StompHeaders;\r\n  disconnectHeaders: StompHeaders;\r\n  heartbeatIncoming: number;\r\n  heartbeatOutgoing: number;\r\n  heartbeatStrategy: TickerStrategy;\r\n  splitLargeFrames: boolean;\r\n  maxWebSocketChunkSize: number;\r\n  forceBinaryWSFrames: boolean;\r\n  logRawCommunication: boolean;\r\n  appendMissingNULLonIncoming: boolean;\r\n  discardWebsocketOnCommFailure: boolean;\r\n  onConnect: frameCallbackType;\r\n  onDisconnect: frameCallbackType;\r\n  onStompError: frameCallbackType;\r\n  onWebSocketClose: closeEventCallbackType;\r\n  onWebSocketError: wsErrorCallbackType;\r\n  onUnhandledMessage: messageCallbackType;\r\n  onUnhandledReceipt: frameCallbackType;\r\n  onUnhandledFrame: frameCallbackType;\r\n}\r\n", "import { debugFnType, TickerStrategy } from './types.js';\r\n\r\nexport class Ticker {\r\n  private readonly _workerScript = `\r\n    var startTime = Date.now();\r\n    setInterval(function() {\r\n        self.postMessage(Date.now() - startTime);\r\n    }, ${this._interval});\r\n  `;\r\n\r\n  private _worker?: Worker;\r\n  private _timer?: any;\r\n\r\n  constructor(\r\n    private readonly _interval: number,\r\n    private readonly _strategy = TickerStrategy.Interval,\r\n    private readonly _debug: debugFnType) {\r\n  }\r\n\r\n  public start(tick: (elapsedTime: number) => void): void {\r\n    this.stop();\r\n\r\n    if (this.shouldUseWorker()) {\r\n      this.runWorker(tick);\r\n    } else {\r\n      this.runInterval(tick);\r\n    }\r\n  }\r\n\r\n  public stop(): void {\r\n    this.disposeWorker();\r\n    this.disposeInterval();\r\n  }\r\n\r\n  private shouldUseWorker(): boolean {\r\n    return typeof(Worker) !== 'undefined' && this._strategy === TickerStrategy.Worker\r\n  }\r\n\r\n  private runWorker(tick: (elapsedTime: number) => void): void {\r\n    this._debug('Using runWorker for outgoing pings');\r\n    if (!this._worker) {\r\n      this._worker = new Worker(\r\n        URL.createObjectURL(\r\n          new Blob([this._workerScript], { type: 'text/javascript' })\r\n        )\r\n      );\r\n      this._worker.onmessage = (message) => tick(message.data);\r\n    }\r\n  }\r\n\r\n  private runInterval(tick: (elapsedTime: number) => void): void {\r\n    this._debug('Using runInterval for outgoing pings');\r\n    if (!this._timer) {\r\n      const startTime = Date.now();\r\n      this._timer = setInterval(() => {\r\n        tick(Date.now() - startTime);\r\n      }, this._interval);\r\n    }\r\n  }\r\n\r\n  private disposeWorker(): void {\r\n    if (this._worker) {\r\n      this._worker.terminate();\r\n      delete this._worker;\r\n      this._debug('Outgoing ping disposeWorker');\r\n    }\r\n  }\r\n\r\n  private disposeInterval(): void {\r\n    if (this._timer) {\r\n      clearInterval(this._timer);\r\n      delete this._timer;\r\n      this._debug('Outgoing ping disposeInterval');\r\n    }\r\n  }\r\n}\r\n", "/**\r\n * Supported STOMP versions\r\n *\r\n * Part of `@stomp/stompjs`.\r\n */\r\nexport class Versions {\r\n  /**\r\n   * Indicates protocol version 1.0\r\n   */\r\n  public static V1_0 = '1.0';\r\n  /**\r\n   * Indicates protocol version 1.1\r\n   */\r\n  public static V1_1 = '1.1';\r\n  /**\r\n   * Indicates protocol version 1.2\r\n   */\r\n  public static V1_2 = '1.2';\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  public static default = new Versions([\r\n    Versions.V1_2,\r\n    Versions.V1_1,\r\n    Versions.V1_0,\r\n  ]);\r\n\r\n  /**\r\n   * Takes an array of versions, typical elements '1.2', '1.1', or '1.0'\r\n   *\r\n   * You will be creating an instance of this class if you want to override\r\n   * supported versions to be declared during STOMP handshake.\r\n   */\r\n  constructor(public versions: string[]) {}\r\n\r\n  /**\r\n   * Used as part of CONNECT STOMP Frame\r\n   */\r\n  public supportedVersions() {\r\n    return this.versions.join(',');\r\n  }\r\n\r\n  /**\r\n   * Used while creating a WebSocket\r\n   */\r\n  public protocolVersions() {\r\n    return this.versions.map(x => `v${x.replace('.', '')}.stomp`);\r\n  }\r\n}\r\n", "import { augmentWebsocket } from './augment-websocket.js';\r\nimport { BYTE } from './byte.js';\r\nimport { Client } from './client.js';\r\nimport { FrameImpl } from './frame-impl.js';\r\nimport type { IMessage } from './i-message.js';\r\nimport { ITransaction } from './i-transaction.js';\r\nimport { Parser } from './parser.js';\r\nimport { StompHeaders } from './stomp-headers.js';\r\nimport { StompSubscription } from './stomp-subscription.js';\r\nimport { Ticker } from './ticker.js';\r\nimport {\r\n  closeEventCallbackType,\r\n  debugFnType,\r\n  frameCallbackType,\r\n  IPublishParams,\r\n  IStompSocket,\r\n  IStompSocketMessageEvent,\r\n  IStomptHandlerConfig,\r\n  messageCallbackType,\r\n  StompSocketState,\r\n  wsErrorCallbackType,\r\n} from './types.js';\r\nimport { Versions } from './versions.js';\r\n\r\n/**\r\n * The STOMP protocol handler\r\n *\r\n * Part of `@stomp/stompjs`.\r\n *\r\n * @internal\r\n */\r\nexport class StompHandler {\r\n  public debug: debugFnType;\r\n\r\n  public stompVersions: Versions;\r\n\r\n  public connectHeaders: StompHeaders;\r\n\r\n  public disconnectHeaders: StompHeaders;\r\n\r\n  public heartbeatIncoming: number;\r\n\r\n  public heartbeatOutgoing: number;\r\n\r\n  public onUnhandledMessage: messageCallbackType;\r\n\r\n  public onUnhandledReceipt: frameCallbackType;\r\n\r\n  public onUnhandledFrame: frameCallbackType;\r\n\r\n  public onConnect: frameCallbackType;\r\n\r\n  public onDisconnect: frameCallbackType;\r\n\r\n  public onStompError: frameCallbackType;\r\n\r\n  public onWebSocketClose: closeEventCallbackType;\r\n\r\n  public onWebSocketError: wsErrorCallbackType;\r\n\r\n  public logRawCommunication: boolean;\r\n\r\n  public splitLargeFrames: boolean;\r\n\r\n  public maxWebSocketChunkSize: number;\r\n\r\n  public forceBinaryWSFrames: boolean;\r\n\r\n  public appendMissingNULLonIncoming: boolean;\r\n\r\n  public discardWebsocketOnCommFailure: boolean;\r\n\r\n  get connectedVersion(): string | undefined {\r\n    return this._connectedVersion;\r\n  }\r\n  private _connectedVersion: string | undefined;\r\n\r\n  get connected(): boolean {\r\n    return this._connected;\r\n  }\r\n\r\n  private _connected: boolean = false;\r\n\r\n  private readonly _subscriptions: { [key: string]: messageCallbackType };\r\n  private readonly _receiptWatchers: { [key: string]: frameCallbackType };\r\n  private _partialData: string;\r\n  private _escapeHeaderValues: boolean;\r\n  private _counter: number;\r\n  private _pinger?: Ticker;\r\n  private _ponger: any;\r\n  private _lastServerActivityTS: number;\r\n\r\n  constructor(\r\n    private _client: Client,\r\n    public _webSocket: IStompSocket,\r\n    config: IStomptHandlerConfig\r\n  ) {\r\n    // used to index subscribers\r\n    this._counter = 0;\r\n\r\n    // subscription callbacks indexed by subscriber's ID\r\n    this._subscriptions = {};\r\n\r\n    // receipt-watchers indexed by receipts-ids\r\n    this._receiptWatchers = {};\r\n\r\n    this._partialData = '';\r\n\r\n    this._escapeHeaderValues = false;\r\n\r\n    this._lastServerActivityTS = Date.now();\r\n\r\n    this.debug = config.debug;\r\n    this.stompVersions = config.stompVersions;\r\n    this.connectHeaders = config.connectHeaders;\r\n    this.disconnectHeaders = config.disconnectHeaders;\r\n    this.heartbeatIncoming = config.heartbeatIncoming;\r\n    this.heartbeatOutgoing = config.heartbeatOutgoing;\r\n    this.splitLargeFrames = config.splitLargeFrames;\r\n    this.maxWebSocketChunkSize = config.maxWebSocketChunkSize;\r\n    this.forceBinaryWSFrames = config.forceBinaryWSFrames;\r\n    this.logRawCommunication = config.logRawCommunication;\r\n    this.appendMissingNULLonIncoming = config.appendMissingNULLonIncoming;\r\n    this.discardWebsocketOnCommFailure = config.discardWebsocketOnCommFailure;\r\n    this.onConnect = config.onConnect;\r\n    this.onDisconnect = config.onDisconnect;\r\n    this.onStompError = config.onStompError;\r\n    this.onWebSocketClose = config.onWebSocketClose;\r\n    this.onWebSocketError = config.onWebSocketError;\r\n    this.onUnhandledMessage = config.onUnhandledMessage;\r\n    this.onUnhandledReceipt = config.onUnhandledReceipt;\r\n    this.onUnhandledFrame = config.onUnhandledFrame;\r\n  }\r\n\r\n  public start(): void {\r\n    const parser = new Parser(\r\n      // On Frame\r\n      rawFrame => {\r\n        const frame = FrameImpl.fromRawFrame(\r\n          rawFrame,\r\n          this._escapeHeaderValues\r\n        );\r\n\r\n        // if this.logRawCommunication is set, the rawChunk is logged at this._webSocket.onmessage\r\n        if (!this.logRawCommunication) {\r\n          this.debug(`<<< ${frame}`);\r\n        }\r\n\r\n        const serverFrameHandler =\r\n          this._serverFrameHandlers[frame.command] || this.onUnhandledFrame;\r\n        serverFrameHandler(frame);\r\n      },\r\n      // On Incoming Ping\r\n      () => {\r\n        this.debug('<<< PONG');\r\n      }\r\n    );\r\n\r\n    this._webSocket.onmessage = (evt: IStompSocketMessageEvent) => {\r\n      this.debug('Received data');\r\n      this._lastServerActivityTS = Date.now();\r\n\r\n      if (this.logRawCommunication) {\r\n        const rawChunkAsString =\r\n          evt.data instanceof ArrayBuffer\r\n            ? new TextDecoder().decode(evt.data)\r\n            : evt.data;\r\n        this.debug(`<<< ${rawChunkAsString}`);\r\n      }\r\n\r\n      parser.parseChunk(\r\n        evt.data as string | ArrayBuffer,\r\n        this.appendMissingNULLonIncoming\r\n      );\r\n    };\r\n\r\n    this._webSocket.onclose = (closeEvent): void => {\r\n      this.debug(`Connection closed to ${this._webSocket.url}`);\r\n      this._cleanUp();\r\n      this.onWebSocketClose(closeEvent);\r\n    };\r\n\r\n    this._webSocket.onerror = (errorEvent): void => {\r\n      this.onWebSocketError(errorEvent);\r\n    };\r\n\r\n    this._webSocket.onopen = () => {\r\n      // Clone before updating\r\n      const connectHeaders = (Object as any).assign({}, this.connectHeaders);\r\n\r\n      this.debug('Web Socket Opened...');\r\n      connectHeaders['accept-version'] = this.stompVersions.supportedVersions();\r\n      connectHeaders['heart-beat'] = [\r\n        this.heartbeatOutgoing,\r\n        this.heartbeatIncoming,\r\n      ].join(',');\r\n      this._transmit({ command: 'CONNECT', headers: connectHeaders });\r\n    };\r\n  }\r\n\r\n  private readonly _serverFrameHandlers: {\r\n    [key: string]: frameCallbackType;\r\n  } = {\r\n    // [CONNECTED Frame](https://stomp.github.com/stomp-specification-1.2.html#CONNECTED_Frame)\r\n    CONNECTED: frame => {\r\n      this.debug(`connected to server ${frame.headers.server}`);\r\n      this._connected = true;\r\n      this._connectedVersion = frame.headers.version;\r\n      // STOMP version 1.2 needs header values to be escaped\r\n      if (this._connectedVersion === Versions.V1_2) {\r\n        this._escapeHeaderValues = true;\r\n      }\r\n\r\n      this._setupHeartbeat(frame.headers);\r\n      this.onConnect(frame);\r\n    },\r\n\r\n    // [MESSAGE Frame](https://stomp.github.com/stomp-specification-1.2.html#MESSAGE)\r\n    MESSAGE: frame => {\r\n      // the callback is registered when the client calls\r\n      // `subscribe()`.\r\n      // If there is no registered subscription for the received message,\r\n      // the default `onUnhandledMessage` callback is used that the client can set.\r\n      // This is useful for subscriptions that are automatically created\r\n      // on the browser side (e.g. [RabbitMQ's temporary\r\n      // queues](https://www.rabbitmq.com/stomp.html)).\r\n      const subscription = frame.headers.subscription;\r\n      const onReceive =\r\n        this._subscriptions[subscription] || this.onUnhandledMessage;\r\n\r\n      // bless the frame to be a Message\r\n      const message = frame as IMessage;\r\n\r\n      const client = this;\r\n      const messageId =\r\n        this._connectedVersion === Versions.V1_2\r\n          ? message.headers.ack\r\n          : message.headers['message-id'];\r\n\r\n      // add `ack()` and `nack()` methods directly to the returned frame\r\n      // so that a simple call to `message.ack()` can acknowledge the message.\r\n      message.ack = (headers: StompHeaders = {}): void => {\r\n        return client.ack(messageId, subscription, headers);\r\n      };\r\n      message.nack = (headers: StompHeaders = {}): void => {\r\n        return client.nack(messageId, subscription, headers);\r\n      };\r\n      onReceive(message);\r\n    },\r\n\r\n    // [RECEIPT Frame](https://stomp.github.com/stomp-specification-1.2.html#RECEIPT)\r\n    RECEIPT: frame => {\r\n      const callback = this._receiptWatchers[frame.headers['receipt-id']];\r\n      if (callback) {\r\n        callback(frame);\r\n        // Server will acknowledge only once, remove the callback\r\n        delete this._receiptWatchers[frame.headers['receipt-id']];\r\n      } else {\r\n        this.onUnhandledReceipt(frame);\r\n      }\r\n    },\r\n\r\n    // [ERROR Frame](https://stomp.github.com/stomp-specification-1.2.html#ERROR)\r\n    ERROR: frame => {\r\n      this.onStompError(frame);\r\n    },\r\n  };\r\n\r\n  private _setupHeartbeat(headers: StompHeaders): void {\r\n    if (\r\n      headers.version !== Versions.V1_1 &&\r\n      headers.version !== Versions.V1_2\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    // It is valid for the server to not send this header\r\n    // https://stomp.github.io/stomp-specification-1.2.html#Heart-beating\r\n    if (!headers['heart-beat']) {\r\n      return;\r\n    }\r\n\r\n    // heart-beat header received from the server looks like:\r\n    //\r\n    //     heart-beat: sx, sy\r\n    const [serverOutgoing, serverIncoming] = headers['heart-beat']\r\n      .split(',')\r\n      .map((v: string) => parseInt(v, 10));\r\n\r\n    if (this.heartbeatOutgoing !== 0 && serverIncoming !== 0) {\r\n      const ttl: number = Math.max(this.heartbeatOutgoing, serverIncoming);\r\n      this.debug(`send PING every ${ttl}ms`);\r\n\r\n      this._pinger = new Ticker(ttl, this._client.heartbeatStrategy, this.debug);\r\n      this._pinger.start(() => {\r\n        if (this._webSocket.readyState === StompSocketState.OPEN) {\r\n          this._webSocket.send(BYTE.LF);\r\n          this.debug('>>> PING');\r\n        }\r\n      });\r\n    }\r\n\r\n    if (this.heartbeatIncoming !== 0 && serverOutgoing !== 0) {\r\n      const ttl: number = Math.max(this.heartbeatIncoming, serverOutgoing);\r\n      this.debug(`check PONG every ${ttl}ms`);\r\n      this._ponger = setInterval(() => {\r\n        const delta = Date.now() - this._lastServerActivityTS;\r\n        // We wait twice the TTL to be flexible on window's setInterval calls\r\n        if (delta > ttl * 2) {\r\n          this.debug(`did not receive server activity for the last ${delta}ms`);\r\n          this._closeOrDiscardWebsocket();\r\n        }\r\n      }, ttl);\r\n    }\r\n  }\r\n\r\n  private _closeOrDiscardWebsocket() {\r\n    if (this.discardWebsocketOnCommFailure) {\r\n      this.debug(\r\n        'Discarding websocket, the underlying socket may linger for a while'\r\n      );\r\n      this.discardWebsocket();\r\n    } else {\r\n      this.debug('Issuing close on the websocket');\r\n      this._closeWebsocket();\r\n    }\r\n  }\r\n\r\n  public forceDisconnect() {\r\n    if (this._webSocket) {\r\n      if (\r\n        this._webSocket.readyState === StompSocketState.CONNECTING ||\r\n        this._webSocket.readyState === StompSocketState.OPEN\r\n      ) {\r\n        this._closeOrDiscardWebsocket();\r\n      }\r\n    }\r\n  }\r\n\r\n  public _closeWebsocket() {\r\n    this._webSocket.onmessage = () => {}; // ignore messages\r\n    this._webSocket.close();\r\n  }\r\n\r\n  public discardWebsocket() {\r\n    if (typeof this._webSocket.terminate !== 'function') {\r\n      augmentWebsocket(this._webSocket, (msg: string) => this.debug(msg));\r\n    }\r\n\r\n    // @ts-ignore - this method will be there at this stage\r\n    this._webSocket.terminate();\r\n  }\r\n\r\n  private _transmit(params: {\r\n    command: string;\r\n    headers?: StompHeaders;\r\n    body?: string;\r\n    binaryBody?: Uint8Array;\r\n    skipContentLengthHeader?: boolean;\r\n  }): void {\r\n    const { command, headers, body, binaryBody, skipContentLengthHeader } =\r\n      params;\r\n    const frame = new FrameImpl({\r\n      command,\r\n      headers,\r\n      body,\r\n      binaryBody,\r\n      escapeHeaderValues: this._escapeHeaderValues,\r\n      skipContentLengthHeader,\r\n    });\r\n\r\n    let rawChunk = frame.serialize();\r\n\r\n    if (this.logRawCommunication) {\r\n      this.debug(`>>> ${rawChunk}`);\r\n    } else {\r\n      this.debug(`>>> ${frame}`);\r\n    }\r\n\r\n    if (this.forceBinaryWSFrames && typeof rawChunk === 'string') {\r\n      rawChunk = new TextEncoder().encode(rawChunk);\r\n    }\r\n\r\n    if (typeof rawChunk !== 'string' || !this.splitLargeFrames) {\r\n      this._webSocket.send(rawChunk);\r\n    } else {\r\n      let out = rawChunk as string;\r\n      while (out.length > 0) {\r\n        const chunk = out.substring(0, this.maxWebSocketChunkSize);\r\n        out = out.substring(this.maxWebSocketChunkSize);\r\n        this._webSocket.send(chunk);\r\n        this.debug(`chunk sent = ${chunk.length}, remaining = ${out.length}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  public dispose(): void {\r\n    if (this.connected) {\r\n      try {\r\n        // clone before updating\r\n        const disconnectHeaders = (Object as any).assign(\r\n          {},\r\n          this.disconnectHeaders\r\n        );\r\n\r\n        if (!disconnectHeaders.receipt) {\r\n          disconnectHeaders.receipt = `close-${this._counter++}`;\r\n        }\r\n        this.watchForReceipt(disconnectHeaders.receipt, frame => {\r\n          this._closeWebsocket();\r\n          this._cleanUp();\r\n          this.onDisconnect(frame);\r\n        });\r\n        this._transmit({ command: 'DISCONNECT', headers: disconnectHeaders });\r\n      } catch (error) {\r\n        this.debug(`Ignoring error during disconnect ${error}`);\r\n      }\r\n    } else {\r\n      if (\r\n        this._webSocket.readyState === StompSocketState.CONNECTING ||\r\n        this._webSocket.readyState === StompSocketState.OPEN\r\n      ) {\r\n        this._closeWebsocket();\r\n      }\r\n    }\r\n  }\r\n\r\n  private _cleanUp() {\r\n    this._connected = false;\r\n\r\n    if (this._pinger) {\r\n      this._pinger.stop();\r\n      this._pinger = undefined;\r\n    }\r\n    if (this._ponger) {\r\n      clearInterval(this._ponger);\r\n      this._ponger = undefined;\r\n    }\r\n  }\r\n\r\n  public publish(params: IPublishParams): void {\r\n    const { destination, headers, body, binaryBody, skipContentLengthHeader } =\r\n      params;\r\n    const hdrs: StompHeaders = (Object as any).assign({ destination }, headers);\r\n    this._transmit({\r\n      command: 'SEND',\r\n      headers: hdrs,\r\n      body,\r\n      binaryBody,\r\n      skipContentLengthHeader,\r\n    });\r\n  }\r\n\r\n  public watchForReceipt(receiptId: string, callback: frameCallbackType): void {\r\n    this._receiptWatchers[receiptId] = callback;\r\n  }\r\n\r\n  public subscribe(\r\n    destination: string,\r\n    callback: messageCallbackType,\r\n    headers: StompHeaders = {}\r\n  ): StompSubscription {\r\n    headers = (Object as any).assign({}, headers);\r\n\r\n    if (!headers.id) {\r\n      headers.id = `sub-${this._counter++}`;\r\n    }\r\n    headers.destination = destination;\r\n    this._subscriptions[headers.id] = callback;\r\n    this._transmit({ command: 'SUBSCRIBE', headers });\r\n    const client = this;\r\n    return {\r\n      id: headers.id,\r\n\r\n      unsubscribe(hdrs) {\r\n        return client.unsubscribe(headers.id, hdrs);\r\n      },\r\n    };\r\n  }\r\n\r\n  public unsubscribe(id: string, headers: StompHeaders = {}): void {\r\n    headers = (Object as any).assign({}, headers);\r\n\r\n    delete this._subscriptions[id];\r\n    headers.id = id;\r\n    this._transmit({ command: 'UNSUBSCRIBE', headers });\r\n  }\r\n\r\n  public begin(transactionId: string): ITransaction {\r\n    const txId = transactionId || `tx-${this._counter++}`;\r\n    this._transmit({\r\n      command: 'BEGIN',\r\n      headers: {\r\n        transaction: txId,\r\n      },\r\n    });\r\n    const client = this;\r\n    return {\r\n      id: txId,\r\n      commit(): void {\r\n        client.commit(txId);\r\n      },\r\n      abort(): void {\r\n        client.abort(txId);\r\n      },\r\n    };\r\n  }\r\n\r\n  public commit(transactionId: string): void {\r\n    this._transmit({\r\n      command: 'COMMIT',\r\n      headers: {\r\n        transaction: transactionId,\r\n      },\r\n    });\r\n  }\r\n\r\n  public abort(transactionId: string): void {\r\n    this._transmit({\r\n      command: 'ABORT',\r\n      headers: {\r\n        transaction: transactionId,\r\n      },\r\n    });\r\n  }\r\n\r\n  public ack(\r\n    messageId: string,\r\n    subscriptionId: string,\r\n    headers: StompHeaders = {}\r\n  ): void {\r\n    headers = (Object as any).assign({}, headers);\r\n\r\n    if (this._connectedVersion === Versions.V1_2) {\r\n      headers.id = messageId;\r\n    } else {\r\n      headers['message-id'] = messageId;\r\n    }\r\n    headers.subscription = subscriptionId;\r\n    this._transmit({ command: 'ACK', headers });\r\n  }\r\n\r\n  public nack(\r\n    messageId: string,\r\n    subscriptionId: string,\r\n    headers: StompHeaders = {}\r\n  ): void {\r\n    headers = (Object as any).assign({}, headers);\r\n\r\n    if (this._connectedVersion === Versions.V1_2) {\r\n      headers.id = messageId;\r\n    } else {\r\n      headers['message-id'] = messageId;\r\n    }\r\n    headers.subscription = subscriptionId;\r\n    return this._transmit({ command: 'NACK', headers });\r\n  }\r\n}\r\n", "import { ITransaction } from './i-transaction.js';\r\nimport { StompConfig } from './stomp-config.js';\r\nimport { StompHandler } from './stomp-handler.js';\r\nimport { StompHeaders } from './stomp-headers.js';\r\nimport { StompSubscription } from './stomp-subscription.js';\r\nimport {\r\n  ActivationState,\r\n  closeEventCallbackType,\r\n  debugFnType,\r\n  frameCallbackType,\r\n  IPublishParams,\r\n  IStompSocket,\r\n  messageCallbackType,\r\n  ReconnectionTimeMode,\r\n  StompSocketState,\r\n  TickerStrategy,\r\n  wsErrorCallbackType,\r\n} from './types.js';\r\nimport { Versions } from './versions.js';\r\n\r\n/**\r\n * @internal\r\n */\r\ndeclare const WebSocket: {\r\n  prototype: IStompSocket;\r\n  new (url: string, protocols?: string | string[]): IStompSocket;\r\n};\r\n\r\n/**\r\n * STOMP Client Class.\r\n *\r\n * Part of `@stomp/stompjs`.\r\n */\r\nexport class Client {\r\n  /**\r\n   * The URL for the STOMP broker to connect to.\r\n   * Typically like `\"ws://broker.329broker.com:15674/ws\"` or `\"wss://broker.329broker.com:15674/ws\"`.\r\n   *\r\n   * Only one of this or [Client#webSocketFactory]{@link Client#webSocketFactory} need to be set.\r\n   * If both are set, [Client#webSocketFactory]{@link Client#webSocketFactory} will be used.\r\n   *\r\n   * If your environment does not support WebSockets natively, please refer to\r\n   * [Polyfills]{@link https://stomp-js.github.io/guide/stompjs/rx-stomp/ng2-stompjs/pollyfils-for-stompjs-v5.html}.\r\n   */\r\n  public brokerURL: string | undefined;\r\n\r\n  /**\r\n   * STOMP versions to attempt during STOMP handshake. By default, versions `1.2`, `1.1`, and `1.0` are attempted.\r\n   *\r\n   * Example:\r\n   * ```javascript\r\n   *        // Try only versions 1.1 and 1.0\r\n   *        client.stompVersions = new Versions(['1.1', '1.0'])\r\n   * ```\r\n   */\r\n  public stompVersions = Versions.default;\r\n\r\n  /**\r\n   * This function should return a WebSocket or a similar (e.g. SockJS) object.\r\n   * If your environment does not support WebSockets natively, please refer to\r\n   * [Polyfills]{@link https://stomp-js.github.io/guide/stompjs/rx-stomp/ng2-stompjs/pollyfils-for-stompjs-v5.html}.\r\n   * If your STOMP Broker supports WebSockets, prefer setting [Client#brokerURL]{@link Client#brokerURL}.\r\n   *\r\n   * If both this and [Client#brokerURL]{@link Client#brokerURL} are set, this will be used.\r\n   *\r\n   * Example:\r\n   * ```javascript\r\n   *        // use a WebSocket\r\n   *        client.webSocketFactory= function () {\r\n   *          return new WebSocket(\"wss://broker.329broker.com:15674/ws\");\r\n   *        };\r\n   *\r\n   *        // Typical usage with SockJS\r\n   *        client.webSocketFactory= function () {\r\n   *          return new SockJS(\"http://broker.329broker.com/stomp\");\r\n   *        };\r\n   * ```\r\n   */\r\n  public webSocketFactory: (() => IStompSocket) | undefined;\r\n\r\n  /**\r\n   * Will retry if Stomp connection is not established in specified milliseconds.\r\n   * Default 0, which switches off automatic reconnection.\r\n   */\r\n  public connectionTimeout: number = 0;\r\n\r\n  // As per https://stackoverflow.com/questions/45802988/typescript-use-correct-version-of-settimeout-node-vs-window/56239226#56239226\r\n  private _connectionWatcher: ReturnType<typeof setTimeout> | undefined; // Timer\r\n\r\n  /**\r\n   *  automatically reconnect with delay in milliseconds, set to 0 to disable.\r\n   */\r\n  public reconnectDelay: number = 5000;\r\n\r\n  /**\r\n   * tracking the time to the next reconnection. Initialized to [Client#reconnectDelay]{@link Client#reconnectDelay}'s value and it may\r\n   * change depending on the [Client#reconnectTimeMode]{@link Client#reconnectTimeMode} setting\r\n   */\r\n  private _nextReconnectDelay: number = 0;\r\n\r\n  /**\r\n   * Maximum time to wait between reconnects, in milliseconds. Defaults to 15 minutes.\r\n   * Only relevant when [Client#reconnectTimeMode]{@link Client#reconnectTimeMode} not LINEAR (e.g., EXPONENTIAL).\r\n   * Set to 0 for no limit on wait time.\r\n   */\r\n  public maxReconnectDelay: number = 15 * 60 * 1000; // 15 minutes in ms\r\n\r\n  /**\r\n   * Reconnection wait time mode, either linear (default) or exponential.\r\n   * Note: See [Client#maxReconnectDelay]{@link Client#maxReconnectDelay} for setting the maximum delay when exponential\r\n   *\r\n   * ```javascript\r\n   * client.configure({\r\n   *   reconnectTimeMode: ReconnectionTimeMode.EXPONENTIAL,\r\n   *   reconnectDelay: 200, // It will wait 200, 400, 800 ms...\r\n   *   maxReconnectDelay: 10000, // Optional, when provided, it will not wait more that these ms\r\n   * })\r\n   * ```\r\n   */\r\n  public reconnectTimeMode: ReconnectionTimeMode = ReconnectionTimeMode.LINEAR;\r\n\r\n  /**\r\n   * Incoming heartbeat interval in milliseconds. Set to 0 to disable.\r\n   */\r\n  public heartbeatIncoming: number = 10000;\r\n\r\n  /**\r\n   * Outgoing heartbeat interval in milliseconds. Set to 0 to disable.\r\n   */\r\n  public heartbeatOutgoing: number = 10000;\r\n\r\n  /**\r\n   * Outgoing heartbeat strategy.\r\n   * See https://github.com/stomp-js/stompjs/pull/579\r\n   *\r\n   * Can be worker or interval strategy, but will always use `interval`\r\n   * if web workers are unavailable, for example, in a non-browser environment.\r\n   *\r\n   * Using Web Workers may work better on long-running pages\r\n   * and mobile apps, as the browser may suspend Timers in the main page.\r\n   * Try the `Worker` mode if you discover disconnects when the browser tab is in the background.\r\n   *\r\n   * When used in a JS environment, use 'worker' or 'interval' as valid values.\r\n   *\r\n   * Defaults to `interval` strategy.\r\n   */\r\n  public heartbeatStrategy: TickerStrategy = TickerStrategy.Interval;\r\n\r\n  /**\r\n   * This switches on a non-standard behavior while sending WebSocket packets.\r\n   * It splits larger (text) packets into chunks of [maxWebSocketChunkSize]{@link Client#maxWebSocketChunkSize}.\r\n   * Only Java Spring brokers seem to support this mode.\r\n   *\r\n   * WebSockets, by itself, split large (text) packets,\r\n   * so it is not needed with a truly compliant STOMP/WebSocket broker.\r\n   * Setting it for such a broker will cause large messages to fail.\r\n   *\r\n   * `false` by default.\r\n   *\r\n   * Binary frames are never split.\r\n   */\r\n  public splitLargeFrames: boolean = false;\r\n\r\n  /**\r\n   * See [splitLargeFrames]{@link Client#splitLargeFrames}.\r\n   * This has no effect if [splitLargeFrames]{@link Client#splitLargeFrames} is `false`.\r\n   */\r\n  public maxWebSocketChunkSize: number = 8 * 1024;\r\n\r\n  /**\r\n   * Usually the\r\n   * [type of WebSocket frame]{@link https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send#Parameters}\r\n   * is automatically decided by type of the payload.\r\n   * Default is `false`, which should work with all compliant brokers.\r\n   *\r\n   * Set this flag to force binary frames.\r\n   */\r\n  public forceBinaryWSFrames: boolean = false;\r\n\r\n  /**\r\n   * A bug in ReactNative chops a string on occurrence of a NULL.\r\n   * See issue [https://github.com/stomp-js/stompjs/issues/89]{@link https://github.com/stomp-js/stompjs/issues/89}.\r\n   * This makes incoming WebSocket messages invalid STOMP packets.\r\n   * Setting this flag attempts to reverse the damage by appending a NULL.\r\n   * If the broker splits a large message into multiple WebSocket messages,\r\n   * this flag will cause data loss and abnormal termination of connection.\r\n   *\r\n   * This is not an ideal solution, but a stop gap until the underlying issue is fixed at ReactNative library.\r\n   */\r\n  public appendMissingNULLonIncoming: boolean = false;\r\n\r\n  /**\r\n   * Underlying WebSocket instance, READONLY.\r\n   */\r\n  get webSocket(): IStompSocket | undefined {\r\n    return this._stompHandler?._webSocket;\r\n  }\r\n\r\n  /**\r\n   * Connection headers, important keys - `login`, `passcode`, `host`.\r\n   * Though STOMP 1.2 standard marks these keys to be present, check your broker documentation for\r\n   * details specific to your broker.\r\n   */\r\n  public connectHeaders: StompHeaders;\r\n\r\n  /**\r\n   * Disconnection headers.\r\n   */\r\n  get disconnectHeaders(): StompHeaders {\r\n    return this._disconnectHeaders;\r\n  }\r\n\r\n  set disconnectHeaders(value: StompHeaders) {\r\n    this._disconnectHeaders = value;\r\n    if (this._stompHandler) {\r\n      this._stompHandler.disconnectHeaders = this._disconnectHeaders;\r\n    }\r\n  }\r\n  private _disconnectHeaders: StompHeaders;\r\n\r\n  /**\r\n   * This function will be called for any unhandled messages.\r\n   * It is useful for receiving messages sent to RabbitMQ temporary queues.\r\n   *\r\n   * It can also get invoked with stray messages while the server is processing\r\n   * a request to [Client#unsubscribe]{@link Client#unsubscribe}\r\n   * from an endpoint.\r\n   *\r\n   * The actual {@link IMessage} will be passed as parameter to the callback.\r\n   */\r\n  public onUnhandledMessage: messageCallbackType;\r\n\r\n  /**\r\n   * STOMP brokers can be requested to notify when an operation is actually completed.\r\n   * Prefer using [Client#watchForReceipt]{@link Client#watchForReceipt}. See\r\n   * [Client#watchForReceipt]{@link Client#watchForReceipt} for examples.\r\n   *\r\n   * The actual {@link IFrame} will be passed as parameter to the callback.\r\n   */\r\n  public onUnhandledReceipt: frameCallbackType;\r\n\r\n  /**\r\n   * Will be invoked if {@link IFrame} of an unknown type is received from the STOMP broker.\r\n   *\r\n   * The actual {@link IFrame} will be passed as parameter to the callback.\r\n   */\r\n  public onUnhandledFrame: frameCallbackType;\r\n\r\n  /**\r\n   * `true` if there is an active connection to STOMP Broker\r\n   */\r\n  get connected(): boolean {\r\n    return !!this._stompHandler && this._stompHandler.connected;\r\n  }\r\n\r\n  /**\r\n   * Callback, invoked on before a connection to the STOMP broker.\r\n   *\r\n   * You can change options on the client, which will impact the immediate connecting.\r\n   * It is valid to call [Client#decativate]{@link Client#deactivate} in this callback.\r\n   *\r\n   * As of version 5.1, this callback can be\r\n   * [async](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function)\r\n   * (i.e., it can return a\r\n   * [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)).\r\n   * In that case, connect will be called only after the Promise is resolved.\r\n   * This can be used to reliably fetch credentials, access token etc. from some other service\r\n   * in an asynchronous way.\r\n   */\r\n  public beforeConnect: (client: Client) => void | Promise<void>;\r\n\r\n  /**\r\n   * Callback, invoked on every successful connection to the STOMP broker.\r\n   *\r\n   * The actual {@link IFrame} will be passed as parameter to the callback.\r\n   * Sometimes clients will like to use headers from this frame.\r\n   */\r\n  public onConnect: frameCallbackType;\r\n\r\n  /**\r\n   * Callback, invoked on every successful disconnection from the STOMP broker. It will not be invoked if\r\n   * the STOMP broker disconnected due to an error.\r\n   *\r\n   * The actual Receipt {@link IFrame} acknowledging the DISCONNECT will be passed as parameter to the callback.\r\n   *\r\n   * The way STOMP protocol is designed, the connection may close/terminate without the client\r\n   * receiving the Receipt {@link IFrame} acknowledging the DISCONNECT.\r\n   * You might find [Client#onWebSocketClose]{@link Client#onWebSocketClose} more appropriate to watch\r\n   * STOMP broker disconnects.\r\n   */\r\n  public onDisconnect: frameCallbackType;\r\n\r\n  /**\r\n   * Callback, invoked on an ERROR frame received from the STOMP Broker.\r\n   * A compliant STOMP Broker will close the connection after this type of frame.\r\n   * Please check broker specific documentation for exact behavior.\r\n   *\r\n   * The actual {@link IFrame} will be passed as parameter to the callback.\r\n   */\r\n  public onStompError: frameCallbackType;\r\n\r\n  /**\r\n   * Callback, invoked when underlying WebSocket is closed.\r\n   *\r\n   * Actual [CloseEvent]{@link https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent}\r\n   * is passed as parameter to the callback.\r\n   */\r\n  public onWebSocketClose: closeEventCallbackType;\r\n\r\n  /**\r\n   * Callback, invoked when underlying WebSocket raises an error.\r\n   *\r\n   * Actual [Event]{@link https://developer.mozilla.org/en-US/docs/Web/API/Event}\r\n   * is passed as parameter to the callback.\r\n   */\r\n  public onWebSocketError: wsErrorCallbackType;\r\n\r\n  /**\r\n   * Set it to log the actual raw communication with the broker.\r\n   * When unset, it logs headers of the parsed frames.\r\n   *\r\n   * Changes effect from the next broker reconnect.\r\n   *\r\n   * **Caution: this assumes that frames only have valid UTF8 strings.**\r\n   */\r\n  public logRawCommunication: boolean;\r\n\r\n  /**\r\n   * By default, debug messages are discarded. To log to `console` following can be used:\r\n   *\r\n   * ```javascript\r\n   *        client.debug = function(str) {\r\n   *          console.log(str);\r\n   *        };\r\n   * ```\r\n   *\r\n   * Currently this method does not support levels of log. Be aware that the\r\n   * output can be quite verbose\r\n   * and may contain sensitive information (like passwords, tokens etc.).\r\n   */\r\n  public debug: debugFnType;\r\n\r\n  /**\r\n   * Browsers do not immediately close WebSockets when `.close` is issued.\r\n   * This may cause reconnection to take a significantly long time in case\r\n   *  of some types of failures.\r\n   * In case of incoming heartbeat failure, this experimental flag instructs\r\n   * the library to discard the socket immediately\r\n   * (even before it is actually closed).\r\n   */\r\n  public discardWebsocketOnCommFailure: boolean = false;\r\n\r\n  /**\r\n   * version of STOMP protocol negotiated with the server, READONLY\r\n   */\r\n  get connectedVersion(): string | undefined {\r\n    return this._stompHandler ? this._stompHandler.connectedVersion : undefined;\r\n  }\r\n\r\n  private _stompHandler: StompHandler | undefined;\r\n\r\n  /**\r\n   * if the client is active (connected or going to reconnect)\r\n   */\r\n  get active(): boolean {\r\n    return this.state === ActivationState.ACTIVE;\r\n  }\r\n\r\n  /**\r\n   * It will be called on state change.\r\n   *\r\n   * When deactivating, it may go from ACTIVE to INACTIVE without entering DEACTIVATING.\r\n   */\r\n  public onChangeState: (state: ActivationState) => void;\r\n\r\n  private _changeState(state: ActivationState) {\r\n    this.state = state;\r\n    this.onChangeState(state);\r\n  }\r\n\r\n  /**\r\n   * Activation state.\r\n   *\r\n   * It will usually be ACTIVE or INACTIVE.\r\n   * When deactivating, it may go from ACTIVE to INACTIVE without entering DEACTIVATING.\r\n   */\r\n  public state: ActivationState = ActivationState.INACTIVE;\r\n\r\n  private _reconnector: any;\r\n\r\n  /**\r\n   * Create an instance.\r\n   */\r\n  constructor(conf: StompConfig = {}) {\r\n    // No op callbacks\r\n    const noOp = () => {};\r\n    this.debug = noOp;\r\n    this.beforeConnect = noOp;\r\n    this.onConnect = noOp;\r\n    this.onDisconnect = noOp;\r\n    this.onUnhandledMessage = noOp;\r\n    this.onUnhandledReceipt = noOp;\r\n    this.onUnhandledFrame = noOp;\r\n    this.onStompError = noOp;\r\n    this.onWebSocketClose = noOp;\r\n    this.onWebSocketError = noOp;\r\n    this.logRawCommunication = false;\r\n    this.onChangeState = noOp;\r\n\r\n    // These parameters would typically get proper values before connect is called\r\n    this.connectHeaders = {};\r\n    this._disconnectHeaders = {};\r\n\r\n    // Apply configuration\r\n    this.configure(conf);\r\n  }\r\n\r\n  /**\r\n   * Update configuration.\r\n   */\r\n  public configure(conf: StompConfig): void {\r\n    // bulk assign all properties to this\r\n    (Object as any).assign(this, conf);\r\n\r\n    // Warn on incorrect maxReconnectDelay settings\r\n    if (\r\n      this.maxReconnectDelay > 0 &&\r\n      this.maxReconnectDelay < this.reconnectDelay\r\n    ) {\r\n      this.debug(\r\n        `Warning: maxReconnectDelay (${this.maxReconnectDelay}ms) is less than reconnectDelay (${this.reconnectDelay}ms). Using reconnectDelay as the maxReconnectDelay delay.`,\r\n      );\r\n      this.maxReconnectDelay = this.reconnectDelay;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initiate the connection with the broker.\r\n   * If the connection breaks, as per [Client#reconnectDelay]{@link Client#reconnectDelay},\r\n   * it will keep trying to reconnect. If the [Client#reconnectTimeMode]{@link Client#reconnectTimeMode}\r\n   * is set to EXPONENTIAL it will increase the wait time exponentially\r\n   *\r\n   * Call [Client#deactivate]{@link Client#deactivate} to disconnect and stop reconnection attempts.\r\n   */\r\n  public activate(): void {\r\n    const _activate = () => {\r\n      if (this.active) {\r\n        this.debug('Already ACTIVE, ignoring request to activate');\r\n        return;\r\n      }\r\n\r\n      this._changeState(ActivationState.ACTIVE);\r\n\r\n      this._nextReconnectDelay = this.reconnectDelay;\r\n      this._connect();\r\n    };\r\n\r\n    // if it is deactivating, wait for it to complete before activating.\r\n    if (this.state === ActivationState.DEACTIVATING) {\r\n      this.debug('Waiting for deactivation to finish before activating');\r\n      this.deactivate().then(() => {\r\n        _activate();\r\n      });\r\n    } else {\r\n      _activate();\r\n    }\r\n  }\r\n\r\n  private async _connect(): Promise<void> {\r\n    await this.beforeConnect(this);\r\n\r\n    if (this._stompHandler) {\r\n      this.debug(\r\n        'There is already a stompHandler, skipping the call to connect',\r\n      );\r\n      return;\r\n    }\r\n\r\n    if (!this.active) {\r\n      this.debug(\r\n        'Client has been marked inactive, will not attempt to connect',\r\n      );\r\n      return;\r\n    }\r\n\r\n    // setup connection watcher\r\n    if (this.connectionTimeout > 0) {\r\n      // clear first\r\n      if (this._connectionWatcher) {\r\n        clearTimeout(this._connectionWatcher);\r\n      }\r\n      this._connectionWatcher = setTimeout(() => {\r\n        if (this.connected) {\r\n          return;\r\n        }\r\n        // Connection not established, close the underlying socket\r\n        // a reconnection will be attempted\r\n        this.debug(\r\n          `Connection not established in ${this.connectionTimeout}ms, closing socket`,\r\n        );\r\n        this.forceDisconnect();\r\n      }, this.connectionTimeout);\r\n    }\r\n\r\n    this.debug('Opening Web Socket...');\r\n\r\n    // Get the actual WebSocket (or a similar object)\r\n    const webSocket = this._createWebSocket();\r\n\r\n    this._stompHandler = new StompHandler(this, webSocket, {\r\n      debug: this.debug,\r\n      stompVersions: this.stompVersions,\r\n      connectHeaders: this.connectHeaders,\r\n      disconnectHeaders: this._disconnectHeaders,\r\n      heartbeatIncoming: this.heartbeatIncoming,\r\n      heartbeatOutgoing: this.heartbeatOutgoing,\r\n      heartbeatStrategy: this.heartbeatStrategy,\r\n      splitLargeFrames: this.splitLargeFrames,\r\n      maxWebSocketChunkSize: this.maxWebSocketChunkSize,\r\n      forceBinaryWSFrames: this.forceBinaryWSFrames,\r\n      logRawCommunication: this.logRawCommunication,\r\n      appendMissingNULLonIncoming: this.appendMissingNULLonIncoming,\r\n      discardWebsocketOnCommFailure: this.discardWebsocketOnCommFailure,\r\n\r\n      onConnect: frame => {\r\n        // Successfully connected, stop the connection watcher\r\n        if (this._connectionWatcher) {\r\n          clearTimeout(this._connectionWatcher);\r\n          this._connectionWatcher = undefined;\r\n        }\r\n\r\n        if (!this.active) {\r\n          this.debug(\r\n            'STOMP got connected while deactivate was issued, will disconnect now',\r\n          );\r\n          this._disposeStompHandler();\r\n          return;\r\n        }\r\n        this.onConnect(frame);\r\n      },\r\n      onDisconnect: frame => {\r\n        this.onDisconnect(frame);\r\n      },\r\n      onStompError: frame => {\r\n        this.onStompError(frame);\r\n      },\r\n      onWebSocketClose: evt => {\r\n        this._stompHandler = undefined; // a new one will be created in case of a reconnect\r\n\r\n        if (this.state === ActivationState.DEACTIVATING) {\r\n          // Mark deactivation complete\r\n          this._changeState(ActivationState.INACTIVE);\r\n        }\r\n\r\n        // The callback is called before attempting to reconnect, this would allow the client\r\n        // to be `deactivated` in the callback.\r\n        this.onWebSocketClose(evt);\r\n\r\n        if (this.active) {\r\n          this._schedule_reconnect();\r\n        }\r\n      },\r\n      onWebSocketError: evt => {\r\n        this.onWebSocketError(evt);\r\n      },\r\n      onUnhandledMessage: message => {\r\n        this.onUnhandledMessage(message);\r\n      },\r\n      onUnhandledReceipt: frame => {\r\n        this.onUnhandledReceipt(frame);\r\n      },\r\n      onUnhandledFrame: frame => {\r\n        this.onUnhandledFrame(frame);\r\n      },\r\n    });\r\n\r\n    this._stompHandler.start();\r\n  }\r\n\r\n  private _createWebSocket(): IStompSocket {\r\n    let webSocket: IStompSocket;\r\n\r\n    if (this.webSocketFactory) {\r\n      webSocket = this.webSocketFactory();\r\n    } else if (this.brokerURL) {\r\n      webSocket = new WebSocket(\r\n        this.brokerURL,\r\n        this.stompVersions.protocolVersions(),\r\n      );\r\n    } else {\r\n      throw new Error('Either brokerURL or webSocketFactory must be provided');\r\n    }\r\n    webSocket.binaryType = 'arraybuffer';\r\n    return webSocket;\r\n  }\r\n\r\n  private _schedule_reconnect(): void {\r\n    if (this._nextReconnectDelay > 0) {\r\n      this.debug(\r\n        `STOMP: scheduling reconnection in ${this._nextReconnectDelay}ms`,\r\n      );\r\n\r\n      this._reconnector = setTimeout(() => {\r\n        if (this.reconnectTimeMode === ReconnectionTimeMode.EXPONENTIAL) {\r\n          this._nextReconnectDelay = this._nextReconnectDelay * 2;\r\n\r\n          // Truncated exponential backoff with a set limit unless disabled\r\n          if (this.maxReconnectDelay !== 0) {\r\n            this._nextReconnectDelay = Math.min(\r\n              this._nextReconnectDelay,\r\n              this.maxReconnectDelay,\r\n            );\r\n          }\r\n        }\r\n\r\n        this._connect();\r\n      }, this._nextReconnectDelay);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Disconnect if connected and stop auto reconnect loop.\r\n   * Appropriate callbacks will be invoked if there is an underlying STOMP connection.\r\n   *\r\n   * This call is async. It will resolve immediately if there is no underlying active websocket,\r\n   * otherwise, it will resolve after the underlying websocket is properly disposed of.\r\n   *\r\n   * It is not an error to invoke this method more than once.\r\n   * Each of those would resolve on completion of deactivation.\r\n   *\r\n   * To reactivate, you can call [Client#activate]{@link Client#activate}.\r\n   *\r\n   * Experimental: pass `force: true` to immediately discard the underlying connection.\r\n   * This mode will skip both the STOMP and the Websocket shutdown sequences.\r\n   * In some cases, browsers take a long time in the Websocket shutdown\r\n   * if the underlying connection had gone stale.\r\n   * Using this mode can speed up.\r\n   * When this mode is used, the actual Websocket may linger for a while\r\n   * and the broker may not realize that the connection is no longer in use.\r\n   *\r\n   * It is possible to invoke this method initially without the `force` option\r\n   * and subsequently, say after a wait, with the `force` option.\r\n   */\r\n  public async deactivate(options: { force?: boolean } = {}): Promise<void> {\r\n    const force: boolean = options.force || false;\r\n    const needToDispose = this.active;\r\n    let retPromise: Promise<void>;\r\n\r\n    if (this.state === ActivationState.INACTIVE) {\r\n      this.debug(`Already INACTIVE, nothing more to do`);\r\n      return Promise.resolve();\r\n    }\r\n\r\n    this._changeState(ActivationState.DEACTIVATING);\r\n\r\n    // Reset reconnection timer just to be safe\r\n    this._nextReconnectDelay = 0;\r\n\r\n    // Clear if a reconnection was scheduled\r\n    if (this._reconnector) {\r\n      clearTimeout(this._reconnector);\r\n      this._reconnector = undefined;\r\n    }\r\n\r\n    if (\r\n      this._stompHandler &&\r\n      // @ts-ignore - if there is a _stompHandler, there is the webSocket\r\n      this.webSocket.readyState !== StompSocketState.CLOSED\r\n    ) {\r\n      const origOnWebSocketClose = this._stompHandler.onWebSocketClose;\r\n      // we need to wait for the underlying websocket to close\r\n      retPromise = new Promise<void>((resolve, reject) => {\r\n        // @ts-ignore - there is a _stompHandler\r\n        this._stompHandler.onWebSocketClose = evt => {\r\n          origOnWebSocketClose(evt);\r\n          resolve();\r\n        };\r\n      });\r\n    } else {\r\n      // indicate that auto reconnect loop should terminate\r\n      this._changeState(ActivationState.INACTIVE);\r\n      return Promise.resolve();\r\n    }\r\n\r\n    if (force) {\r\n      this._stompHandler?.discardWebsocket();\r\n    } else if (needToDispose) {\r\n      this._disposeStompHandler();\r\n    }\r\n\r\n    return retPromise;\r\n  }\r\n\r\n  /**\r\n   * Force disconnect if there is an active connection by directly closing the underlying WebSocket.\r\n   * This is different from a normal disconnect where a DISCONNECT sequence is carried out with the broker.\r\n   * After forcing disconnect, automatic reconnect will be attempted.\r\n   * To stop further reconnects call [Client#deactivate]{@link Client#deactivate} as well.\r\n   */\r\n  public forceDisconnect() {\r\n    if (this._stompHandler) {\r\n      this._stompHandler.forceDisconnect();\r\n    }\r\n  }\r\n\r\n  private _disposeStompHandler() {\r\n    // Dispose STOMP Handler\r\n    if (this._stompHandler) {\r\n      this._stompHandler.dispose();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Send a message to a named destination. Refer to your STOMP broker documentation for types\r\n   * and naming of destinations.\r\n   *\r\n   * STOMP protocol specifies and suggests some headers and also allows broker-specific headers.\r\n   *\r\n   * `body` must be String.\r\n   * You will need to covert the payload to string in case it is not string (e.g. JSON).\r\n   *\r\n   * To send a binary message body, use `binaryBody` parameter. It should be a\r\n   * [Uint8Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array).\r\n   * Sometimes brokers may not support binary frames out of the box.\r\n   * Please check your broker documentation.\r\n   *\r\n   * `content-length` header is automatically added to the STOMP Frame sent to the broker.\r\n   * Set `skipContentLengthHeader` to indicate that `content-length` header should not be added.\r\n   * For binary messages, `content-length` header is always added.\r\n   *\r\n   * Caution: The broker will, most likely, report an error and disconnect\r\n   * if the message body has NULL octet(s) and `content-length` header is missing.\r\n   *\r\n   * ```javascript\r\n   *        client.publish({destination: \"/queue/test\", headers: {priority: 9}, body: \"Hello, STOMP\"});\r\n   *\r\n   *        // Only destination is mandatory parameter\r\n   *        client.publish({destination: \"/queue/test\", body: \"Hello, STOMP\"});\r\n   *\r\n   *        // Skip content-length header in the frame to the broker\r\n   *        client.publish({\"/queue/test\", body: \"Hello, STOMP\", skipContentLengthHeader: true});\r\n   *\r\n   *        var binaryData = generateBinaryData(); // This need to be of type Uint8Array\r\n   *        // setting content-type header is not mandatory, however a good practice\r\n   *        client.publish({destination: '/topic/special', binaryBody: binaryData,\r\n   *                         headers: {'content-type': 'application/octet-stream'}});\r\n   * ```\r\n   */\r\n  public publish(params: IPublishParams) {\r\n    this._checkConnection();\r\n    // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\r\n    this._stompHandler.publish(params);\r\n  }\r\n\r\n  private _checkConnection() {\r\n    if (!this.connected) {\r\n      throw new TypeError('There is no underlying STOMP connection');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * STOMP brokers may carry out operation asynchronously and allow requesting for acknowledgement.\r\n   * To request an acknowledgement, a `receipt` header needs to be sent with the actual request.\r\n   * The value (say receipt-id) for this header needs to be unique for each use.\r\n   * Typically, a sequence, a UUID, a random number or a combination may be used.\r\n   *\r\n   * A complaint broker will send a RECEIPT frame when an operation has actually been completed.\r\n   * The operation needs to be matched based on the value of the receipt-id.\r\n   *\r\n   * This method allows watching for a receipt and invoking the callback\r\n   *  when the corresponding receipt has been received.\r\n   *\r\n   * The actual {@link IFrame} will be passed as parameter to the callback.\r\n   *\r\n   * Example:\r\n   * ```javascript\r\n   *        // Subscribing with acknowledgement\r\n   *        let receiptId = randomText();\r\n   *\r\n   *        client.watchForReceipt(receiptId, function() {\r\n   *          // Will be called after server acknowledges\r\n   *        });\r\n   *\r\n   *        client.subscribe(TEST.destination, onMessage, {receipt: receiptId});\r\n   *\r\n   *\r\n   *        // Publishing with acknowledgement\r\n   *        receiptId = randomText();\r\n   *\r\n   *        client.watchForReceipt(receiptId, function() {\r\n   *          // Will be called after server acknowledges\r\n   *        });\r\n   *        client.publish({destination: TEST.destination, headers: {receipt: receiptId}, body: msg});\r\n   * ```\r\n   */\r\n  public watchForReceipt(receiptId: string, callback: frameCallbackType): void {\r\n    this._checkConnection();\r\n    // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\r\n    this._stompHandler.watchForReceipt(receiptId, callback);\r\n  }\r\n\r\n  /**\r\n   * Subscribe to a STOMP Broker location. The callback will be invoked for each\r\n   * received message with the {@link IMessage} as argument.\r\n   *\r\n   * Note: The library will generate a unique ID if there is none provided in the headers.\r\n   *       To use your own ID, pass it using the `headers` argument.\r\n   *\r\n   * ```javascript\r\n   *        callback = function(message) {\r\n   *        // called when the client receives a STOMP message from the server\r\n   *          if (message.body) {\r\n   *            alert(\"got message with body \" + message.body)\r\n   *          } else {\r\n   *            alert(\"got empty message\");\r\n   *          }\r\n   *        });\r\n   *\r\n   *        var subscription = client.subscribe(\"/queue/test\", callback);\r\n   *\r\n   *        // Explicit subscription id\r\n   *        var mySubId = 'my-subscription-id-001';\r\n   *        var subscription = client.subscribe(destination, callback, { id: mySubId });\r\n   * ```\r\n   */\r\n  public subscribe(\r\n    destination: string,\r\n    callback: messageCallbackType,\r\n    headers: StompHeaders = {},\r\n  ): StompSubscription {\r\n    this._checkConnection();\r\n    // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\r\n    return this._stompHandler.subscribe(destination, callback, headers);\r\n  }\r\n\r\n  /**\r\n   * It is preferable to unsubscribe from a subscription by calling\r\n   * `unsubscribe()` directly on {@link StompSubscription} returned by `client.subscribe()`:\r\n   *\r\n   * ```javascript\r\n   *        var subscription = client.subscribe(destination, onmessage);\r\n   *        // ...\r\n   *        subscription.unsubscribe();\r\n   * ```\r\n   *\r\n   * See: https://stomp.github.com/stomp-specification-1.2.html#UNSUBSCRIBE UNSUBSCRIBE Frame\r\n   */\r\n  public unsubscribe(id: string, headers: StompHeaders = {}): void {\r\n    this._checkConnection();\r\n    // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\r\n    this._stompHandler.unsubscribe(id, headers);\r\n  }\r\n\r\n  /**\r\n   * Start a transaction, the returned {@link ITransaction} has methods - [commit]{@link ITransaction#commit}\r\n   * and [abort]{@link ITransaction#abort}.\r\n   *\r\n   * `transactionId` is optional, if not passed the library will generate it internally.\r\n   */\r\n  public begin(transactionId?: string): ITransaction {\r\n    this._checkConnection();\r\n    // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\r\n    return this._stompHandler.begin(transactionId);\r\n  }\r\n\r\n  /**\r\n   * Commit a transaction.\r\n   *\r\n   * It is preferable to commit a transaction by calling [commit]{@link ITransaction#commit} directly on\r\n   * {@link ITransaction} returned by [client.begin]{@link Client#begin}.\r\n   *\r\n   * ```javascript\r\n   *        var tx = client.begin(txId);\r\n   *        //...\r\n   *        tx.commit();\r\n   * ```\r\n   */\r\n  public commit(transactionId: string): void {\r\n    this._checkConnection();\r\n    // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\r\n    this._stompHandler.commit(transactionId);\r\n  }\r\n\r\n  /**\r\n   * Abort a transaction.\r\n   * It is preferable to abort a transaction by calling [abort]{@link ITransaction#abort} directly on\r\n   * {@link ITransaction} returned by [client.begin]{@link Client#begin}.\r\n   *\r\n   * ```javascript\r\n   *        var tx = client.begin(txId);\r\n   *        //...\r\n   *        tx.abort();\r\n   * ```\r\n   */\r\n  public abort(transactionId: string): void {\r\n    this._checkConnection();\r\n    // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\r\n    this._stompHandler.abort(transactionId);\r\n  }\r\n\r\n  /**\r\n   * ACK a message. It is preferable to acknowledge a message by calling [ack]{@link IMessage#ack} directly\r\n   * on the {@link IMessage} handled by a subscription callback:\r\n   *\r\n   * ```javascript\r\n   *        var callback = function (message) {\r\n   *          // process the message\r\n   *          // acknowledge it\r\n   *          message.ack();\r\n   *        };\r\n   *        client.subscribe(destination, callback, {'ack': 'client'});\r\n   * ```\r\n   */\r\n  public ack(\r\n    messageId: string,\r\n    subscriptionId: string,\r\n    headers: StompHeaders = {},\r\n  ): void {\r\n    this._checkConnection();\r\n    // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\r\n    this._stompHandler.ack(messageId, subscriptionId, headers);\r\n  }\r\n\r\n  /**\r\n   * NACK a message. It is preferable to acknowledge a message by calling [nack]{@link IMessage#nack} directly\r\n   * on the {@link IMessage} handled by a subscription callback:\r\n   *\r\n   * ```javascript\r\n   *        var callback = function (message) {\r\n   *          // process the message\r\n   *          // an error occurs, nack it\r\n   *          message.nack();\r\n   *        };\r\n   *        client.subscribe(destination, callback, {'ack': 'client'});\r\n   * ```\r\n   */\r\n  public nack(\r\n    messageId: string,\r\n    subscriptionId: string,\r\n    headers: StompHeaders = {},\r\n  ): void {\r\n    this._checkConnection();\r\n    // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\r\n    this._stompHandler.nack(messageId, subscriptionId, headers);\r\n  }\r\n}\r\n", "import { StompHeaders } from './stomp-headers.js';\r\nimport {\r\n  ActivationState,\r\n  TickerStrategy,\r\n  closeEventCallbackType,\r\n  debugFnType,\r\n  frameCallbackType,\r\n  messageCallbackType,\r\n  ReconnectionTimeMode,\r\n  wsErrorCallbackType,\r\n} from './types.js';\r\nimport { Versions } from './versions.js';\r\nimport { Client } from './client.js';\r\n\r\n/**\r\n * Configuration options for STOMP Client, each key corresponds to\r\n * field by the same name in {@link Client}. This can be passed to\r\n * the constructor of {@link Client} or to [Client#configure]{@link Client#configure}.\r\n *\r\n * Part of `@stomp/stompjs`.\r\n */\r\nexport class StompConfig {\r\n  /**\r\n   * See [Client#brokerURL]{@link Client#brokerURL}.\r\n   */\r\n  public brokerURL?: string;\r\n\r\n  /**\r\n   * See [Client#stompVersions]{@link Client#stompVersions}.\r\n   */\r\n  public stompVersions?: Versions;\r\n\r\n  /**\r\n   * See [Client#webSocketFactory]{@link Client#webSocketFactory}.\r\n   */\r\n  public webSocketFactory?: () => any;\r\n\r\n  /**\r\n   * See [Client#connectionTimeout]{@link Client#connectionTimeout}.\r\n   */\r\n  public connectionTimeout?: number;\r\n\r\n  /**\r\n   * See [Client#reconnectDelay]{@link Client#reconnectDelay}.\r\n   */\r\n  public reconnectDelay?: number;\r\n\r\n  /**\r\n   * See [Client#maxReconnectDelay]{@link Client#maxReconnectDelay}\r\n   */\r\n  public maxReconnectDelay?: number;\r\n\r\n  /**\r\n   * See [Client#reconnectTimeMode]{@link Client#reconnectTimeMode}\r\n   */\r\n  public reconnectTimeMode?: ReconnectionTimeMode;\r\n\r\n  /**\r\n   * See [Client#heartbeatIncoming]{@link Client#heartbeatIncoming}.\r\n   */\r\n  public heartbeatIncoming?: number;\r\n\r\n  /**\r\n   * See [Client#heartbeatOutgoing]{@link Client#heartbeatOutgoing}.\r\n   */\r\n  public heartbeatOutgoing?: number;\r\n\r\n  /**\r\n   * See [Client#heartbeatStrategy]{@link Client#heartbeatStrategy}.\r\n   */\r\n  public heartbeatStrategy?: TickerStrategy;\r\n\r\n  /**\r\n   * See [Client#splitLargeFrames]{@link Client#splitLargeFrames}.\r\n   */\r\n  public splitLargeFrames?: boolean;\r\n\r\n  /**\r\n   * See [Client#forceBinaryWSFrames]{@link Client#forceBinaryWSFrames}.\r\n   */\r\n  public forceBinaryWSFrames?: boolean;\r\n\r\n  /**\r\n   * See [Client#appendMissingNULLonIncoming]{@link Client#appendMissingNULLonIncoming}.\r\n   */\r\n  public appendMissingNULLonIncoming?: boolean;\r\n\r\n  /**\r\n   * See [Client#maxWebSocketChunkSize]{@link Client#maxWebSocketChunkSize}.\r\n   */\r\n  public maxWebSocketChunkSize?: number;\r\n\r\n  /**\r\n   * See [Client#connectHeaders]{@link Client#connectHeaders}.\r\n   */\r\n  public connectHeaders?: StompHeaders;\r\n\r\n  /**\r\n   * See [Client#disconnectHeaders]{@link Client#disconnectHeaders}.\r\n   */\r\n  public disconnectHeaders?: StompHeaders;\r\n\r\n  /**\r\n   * See [Client#onUnhandledMessage]{@link Client#onUnhandledMessage}.\r\n   */\r\n  public onUnhandledMessage?: messageCallbackType;\r\n\r\n  /**\r\n   * See [Client#onUnhandledReceipt]{@link Client#onUnhandledReceipt}.\r\n   */\r\n  public onUnhandledReceipt?: frameCallbackType;\r\n\r\n  /**\r\n   * See [Client#onUnhandledFrame]{@link Client#onUnhandledFrame}.\r\n   */\r\n  public onUnhandledFrame?: frameCallbackType;\r\n\r\n  /**\r\n   * See [Client#beforeConnect]{@link Client#beforeConnect}.\r\n   */\r\n  public beforeConnect?: (client: Client) => void | Promise<void>;\r\n\r\n  /**\r\n   * See [Client#onConnect]{@link Client#onConnect}.\r\n   */\r\n  public onConnect?: frameCallbackType;\r\n\r\n  /**\r\n   * See [Client#onDisconnect]{@link Client#onDisconnect}.\r\n   */\r\n  public onDisconnect?: frameCallbackType;\r\n\r\n  /**\r\n   * See [Client#onStompError]{@link Client#onStompError}.\r\n   */\r\n  public onStompError?: frameCallbackType;\r\n\r\n  /**\r\n   * See [Client#onWebSocketClose]{@link Client#onWebSocketClose}.\r\n   */\r\n  public onWebSocketClose?: closeEventCallbackType;\r\n\r\n  /**\r\n   * See [Client#onWebSocketError]{@link Client#onWebSocketError}.\r\n   */\r\n  public onWebSocketError?: wsErrorCallbackType;\r\n\r\n  /**\r\n   * See [Client#logRawCommunication]{@link Client#logRawCommunication}.\r\n   */\r\n  public logRawCommunication?: boolean;\r\n\r\n  /**\r\n   * See [Client#debug]{@link Client#debug}.\r\n   */\r\n  public debug?: debugFnType;\r\n\r\n  /**\r\n   * See [Client#discardWebsocketOnCommFailure]{@link Client#discardWebsocketOnCommFailure}.\r\n   */\r\n  public discardWebsocketOnCommFailure?: boolean;\r\n\r\n  /**\r\n   * See [Client#onChangeState]{@link Client#onChangeState}.\r\n   */\r\n  public onChangeState?: (state: ActivationState) => void;\r\n}\r\n", "/**\r\n * STOMP headers. Many functions calls will accept headers as parameters.\r\n * The headers sent by Broker will be available as [IFrame#headers]{@link IFrame#headers}.\r\n *\r\n * `key` and `value` must be valid strings.\r\n * In addition, `key` must not contain `CR`, `LF`, or `:`.\r\n *\r\n * Part of `@stomp/stompjs`.\r\n */\r\nexport class StompHeaders {\r\n  [key: string]: string;\r\n}\r\n", "import { CompatClient } from './compat-client.js';\r\n\r\n/**\r\n * Part of `@stomp/stompjs`.\r\n *\r\n * @internal\r\n */\r\nexport class HeartbeatInfo {\r\n  constructor(private client: CompatClient) {}\r\n\r\n  get outgoing(): number {\r\n    return this.client.heartbeatOutgoing;\r\n  }\r\n\r\n  set outgoing(value: number) {\r\n    this.client.heartbeatOutgoing = value;\r\n  }\r\n\r\n  get incoming(): number {\r\n    return this.client.heartbeatIncoming;\r\n  }\r\n\r\n  set incoming(value: number) {\r\n    this.client.heartbeatIncoming = value;\r\n  }\r\n}\r\n", "import { Client } from '../client.js';\r\nimport { StompHeaders } from '../stomp-headers.js';\r\nimport { frameCallbackType, messageCallbackType } from '../types.js';\r\nimport { HeartbeatInfo } from './heartbeat-info.js';\r\n\r\n/**\r\n * Available for backward compatibility, please shift to using {@link Client}.\r\n *\r\n * **Deprecated**\r\n *\r\n * Part of `@stomp/stompjs`.\r\n *\r\n * To upgrade, please follow the [Upgrade Guide](https://stomp-js.github.io/guide/stompjs/upgrading-stompjs.html)\r\n */\r\nexport class CompatClient extends Client {\r\n  /**\r\n   * It is no op now. No longer needed. Large packets work out of the box.\r\n   */\r\n  public maxWebSocketFrameSize: number = 16 * 1024;\r\n\r\n  /**\r\n   * Available for backward compatibility, please shift to using {@link Client}\r\n   * and [Client#webSocketFactory]{@link Client#webSocketFactory}.\r\n   *\r\n   * **Deprecated**\r\n   *\r\n   * @internal\r\n   */\r\n  constructor(webSocketFactory: () => any) {\r\n    super();\r\n    this.reconnect_delay = 0;\r\n    this.webSocketFactory = webSocketFactory;\r\n    // Default from previous version\r\n    this.debug = (...message: any[]) => {\r\n      console.log(...message);\r\n    };\r\n  }\r\n\r\n  private _parseConnect(...args: any[]): any {\r\n    let closeEventCallback;\r\n    let connectCallback;\r\n    let errorCallback;\r\n    let headers: StompHeaders = {};\r\n    if (args.length < 2) {\r\n      throw new Error('Connect requires at least 2 arguments');\r\n    }\r\n    if (typeof args[1] === 'function') {\r\n      [headers, connectCallback, errorCallback, closeEventCallback] = args;\r\n    } else {\r\n      switch (args.length) {\r\n        case 6:\r\n          [\r\n            headers.login,\r\n            headers.passcode,\r\n            connectCallback,\r\n            errorCallback,\r\n            closeEventCallback,\r\n            headers.host,\r\n          ] = args;\r\n          break;\r\n        default:\r\n          [\r\n            headers.login,\r\n            headers.passcode,\r\n            connectCallback,\r\n            errorCallback,\r\n            closeEventCallback,\r\n          ] = args;\r\n      }\r\n    }\r\n\r\n    return [headers, connectCallback, errorCallback, closeEventCallback];\r\n  }\r\n\r\n  /**\r\n   * Available for backward compatibility, please shift to using [Client#activate]{@link Client#activate}.\r\n   *\r\n   * **Deprecated**\r\n   *\r\n   * The `connect` method accepts different number of arguments and types. See the Overloads list. Use the\r\n   * version with headers to pass your broker specific options.\r\n   *\r\n   * overloads:\r\n   * - connect(headers, connectCallback)\r\n   * - connect(headers, connectCallback, errorCallback)\r\n   * - connect(login, passcode, connectCallback)\r\n   * - connect(login, passcode, connectCallback, errorCallback)\r\n   * - connect(login, passcode, connectCallback, errorCallback, closeEventCallback)\r\n   * - connect(login, passcode, connectCallback, errorCallback, closeEventCallback, host)\r\n   *\r\n   * params:\r\n   * - headers, see [Client#connectHeaders]{@link Client#connectHeaders}\r\n   * - connectCallback, see [Client#onConnect]{@link Client#onConnect}\r\n   * - errorCallback, see [Client#onStompError]{@link Client#onStompError}\r\n   * - closeEventCallback, see [Client#onWebSocketClose]{@link Client#onWebSocketClose}\r\n   * - login [String], see [Client#connectHeaders](../classes/Client.html#connectHeaders)\r\n   * - passcode [String], [Client#connectHeaders](../classes/Client.html#connectHeaders)\r\n   * - host [String], see [Client#connectHeaders](../classes/Client.html#connectHeaders)\r\n   *\r\n   * To upgrade, please follow the [Upgrade Guide](../additional-documentation/upgrading.html)\r\n   */\r\n  public connect(...args: any[]): void {\r\n    const out = this._parseConnect(...args);\r\n\r\n    if (out[0]) {\r\n      this.connectHeaders = out[0];\r\n    }\r\n    if (out[1]) {\r\n      this.onConnect = out[1];\r\n    }\r\n    if (out[2]) {\r\n      this.onStompError = out[2];\r\n    }\r\n    if (out[3]) {\r\n      this.onWebSocketClose = out[3];\r\n    }\r\n\r\n    super.activate();\r\n  }\r\n\r\n  /**\r\n   * Available for backward compatibility, please shift to using [Client#deactivate]{@link Client#deactivate}.\r\n   *\r\n   * **Deprecated**\r\n   *\r\n   * See:\r\n   * [Client#onDisconnect]{@link Client#onDisconnect}, and\r\n   * [Client#disconnectHeaders]{@link Client#disconnectHeaders}\r\n   *\r\n   * To upgrade, please follow the [Upgrade Guide](../additional-documentation/upgrading.html)\r\n   */\r\n  public disconnect(\r\n    disconnectCallback?: any,\r\n    headers: StompHeaders = {}\r\n  ): void {\r\n    if (disconnectCallback) {\r\n      this.onDisconnect = disconnectCallback;\r\n    }\r\n    this.disconnectHeaders = headers;\r\n\r\n    super.deactivate();\r\n  }\r\n\r\n  /**\r\n   * Available for backward compatibility, use [Client#publish]{@link Client#publish}.\r\n   *\r\n   * Send a message to a named destination. Refer to your STOMP broker documentation for types\r\n   * and naming of destinations. The headers will, typically, be available to the subscriber.\r\n   * However, there may be special purpose headers corresponding to your STOMP broker.\r\n   *\r\n   *  **Deprecated**, use [Client#publish]{@link Client#publish}\r\n   *\r\n   * Note: Body must be String. You will need to covert the payload to string in case it is not string (e.g. JSON)\r\n   *\r\n   * ```javascript\r\n   *        client.send(\"/queue/test\", {priority: 9}, \"Hello, STOMP\");\r\n   *\r\n   *        // If you want to send a message with a body, you must also pass the headers argument.\r\n   *        client.send(\"/queue/test\", {}, \"Hello, STOMP\");\r\n   * ```\r\n   *\r\n   * To upgrade, please follow the [Upgrade Guide](../additional-documentation/upgrading.html)\r\n   */\r\n  public send(\r\n    destination: string,\r\n    headers: { [key: string]: any } = {},\r\n    body: string = ''\r\n  ): void {\r\n    headers = (Object as any).assign({}, headers);\r\n\r\n    const skipContentLengthHeader = headers['content-length'] === false;\r\n    if (skipContentLengthHeader) {\r\n      delete headers['content-length'];\r\n    }\r\n    this.publish({\r\n      destination,\r\n      headers: headers as StompHeaders,\r\n      body,\r\n      skipContentLengthHeader,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Available for backward compatibility, renamed to [Client#reconnectDelay]{@link Client#reconnectDelay}.\r\n   *\r\n   * **Deprecated**\r\n   */\r\n  set reconnect_delay(value: number) {\r\n    this.reconnectDelay = value;\r\n  }\r\n\r\n  /**\r\n   * Available for backward compatibility, renamed to [Client#webSocket]{@link Client#webSocket}.\r\n   *\r\n   * **Deprecated**\r\n   */\r\n  get ws(): any {\r\n    return this.webSocket;\r\n  }\r\n\r\n  /**\r\n   * Available for backward compatibility, renamed to [Client#connectedVersion]{@link Client#connectedVersion}.\r\n   *\r\n   * **Deprecated**\r\n   */\r\n  get version() {\r\n    return this.connectedVersion;\r\n  }\r\n\r\n  /**\r\n   * Available for backward compatibility, renamed to [Client#onUnhandledMessage]{@link Client#onUnhandledMessage}.\r\n   *\r\n   * **Deprecated**\r\n   */\r\n  get onreceive(): messageCallbackType {\r\n    return this.onUnhandledMessage;\r\n  }\r\n\r\n  /**\r\n   * Available for backward compatibility, renamed to [Client#onUnhandledMessage]{@link Client#onUnhandledMessage}.\r\n   *\r\n   * **Deprecated**\r\n   */\r\n  set onreceive(value: messageCallbackType) {\r\n    this.onUnhandledMessage = value;\r\n  }\r\n\r\n  /**\r\n   * Available for backward compatibility, renamed to [Client#onUnhandledReceipt]{@link Client#onUnhandledReceipt}.\r\n   * Prefer using [Client#watchForReceipt]{@link Client#watchForReceipt}.\r\n   *\r\n   * **Deprecated**\r\n   */\r\n  get onreceipt(): frameCallbackType {\r\n    return this.onUnhandledReceipt;\r\n  }\r\n\r\n  /**\r\n   * Available for backward compatibility, renamed to [Client#onUnhandledReceipt]{@link Client#onUnhandledReceipt}.\r\n   *\r\n   * **Deprecated**\r\n   */\r\n  set onreceipt(value: frameCallbackType) {\r\n    this.onUnhandledReceipt = value;\r\n  }\r\n\r\n  private _heartbeatInfo: HeartbeatInfo = new HeartbeatInfo(this);\r\n\r\n  /**\r\n   * Available for backward compatibility, renamed to [Client#heartbeatIncoming]{@link Client#heartbeatIncoming}\r\n   * [Client#heartbeatOutgoing]{@link Client#heartbeatOutgoing}.\r\n   *\r\n   * **Deprecated**\r\n   */\r\n  get heartbeat() {\r\n    return this._heartbeatInfo;\r\n  }\r\n\r\n  /**\r\n   * Available for backward compatibility, renamed to [Client#heartbeatIncoming]{@link Client#heartbeatIncoming}\r\n   * [Client#heartbeatOutgoing]{@link Client#heartbeatOutgoing}.\r\n   *\r\n   * **Deprecated**\r\n   */\r\n  set heartbeat(value: { incoming: number; outgoing: number }) {\r\n    this.heartbeatIncoming = value.incoming;\r\n    this.heartbeatOutgoing = value.outgoing;\r\n  }\r\n}\r\n", "import { Versions } from '../versions.js';\r\nimport { CompatClient } from './compat-client.js';\r\nimport { IStompSocket } from '../types.js';\r\n\r\n/**\r\n * @internal\r\n */\r\ndeclare const WebSocket: {\r\n  prototype: IStompSocket;\r\n  new (url: string, protocols?: string | string[]): IStompSocket;\r\n};\r\n\r\n/**\r\n * STOMP Class, acts like a factory to create {@link Client}.\r\n *\r\n * Part of `@stomp/stompjs`.\r\n *\r\n * **Deprecated**\r\n *\r\n * It will be removed in next major version. Please switch to {@link Client}.\r\n */\r\nexport class Stomp {\r\n  /**\r\n   * In case you need to use a non standard class for WebSocket.\r\n   *\r\n   * For example when using within NodeJS environment:\r\n   *\r\n   * ```javascript\r\n   *        StompJs = require('../../esm5/');\r\n   *        Stomp = StompJs.Stomp;\r\n   *        Stomp.WebSocketClass = require('websocket').w3cwebsocket;\r\n   * ```\r\n   *\r\n   * **Deprecated**\r\n   *\r\n   *\r\n   * It will be removed in next major version. Please switch to {@link Client}\r\n   * using [Client#webSocketFactory]{@link Client#webSocketFactory}.\r\n   */\r\n  // tslint:disable-next-line:variable-name\r\n  public static WebSocketClass: any = null;\r\n\r\n  /**\r\n   * This method creates a WebSocket client that is connected to\r\n   * the STOMP server located at the url.\r\n   *\r\n   * ```javascript\r\n   *        var url = \"ws://localhost:61614/stomp\";\r\n   *        var client = Stomp.client(url);\r\n   * ```\r\n   *\r\n   * **Deprecated**\r\n   *\r\n   * It will be removed in next major version. Please switch to {@link Client}\r\n   * using [Client#brokerURL]{@link Client#brokerURL}.\r\n   */\r\n  public static client(url: string, protocols?: string[]): CompatClient {\r\n    // This is a hack to allow another implementation than the standard\r\n    // HTML5 WebSocket class.\r\n    //\r\n    // It is possible to use another class by calling\r\n    //\r\n    //     Stomp.WebSocketClass = MozWebSocket\r\n    //\r\n    // *prior* to call `Stomp.client()`.\r\n    //\r\n    // This hack is deprecated and `Stomp.over()` method should be used\r\n    // instead.\r\n\r\n    // See remarks on the function Stomp.over\r\n    if (protocols == null) {\r\n      protocols = Versions.default.protocolVersions();\r\n    }\r\n    const wsFn = () => {\r\n      const klass = Stomp.WebSocketClass || WebSocket;\r\n      return new klass(url, protocols);\r\n    };\r\n\r\n    return new CompatClient(wsFn);\r\n  }\r\n\r\n  /**\r\n   * This method is an alternative to [Stomp#client]{@link Stomp#client} to let the user\r\n   * specify the WebSocket to use (either a standard HTML5 WebSocket or\r\n   * a similar object).\r\n   *\r\n   * In order to support reconnection, the function Client._connect should be callable more than once.\r\n   * While reconnecting\r\n   * a new instance of underlying transport (TCP Socket, WebSocket or SockJS) will be needed. So, this function\r\n   * alternatively allows passing a function that should return a new instance of the underlying socket.\r\n   *\r\n   * ```javascript\r\n   *        var client = Stomp.over(function(){\r\n   *          return new WebSocket('ws://localhost:15674/ws')\r\n   *        });\r\n   * ```\r\n   *\r\n   * **Deprecated**\r\n   *\r\n   * It will be removed in next major version. Please switch to {@link Client}\r\n   * using [Client#webSocketFactory]{@link Client#webSocketFactory}.\r\n   */\r\n  public static over(ws: any): CompatClient {\r\n    let wsFn: () => any;\r\n\r\n    if (typeof ws === 'function') {\r\n      wsFn = ws;\r\n    } else {\r\n      console.warn(\r\n        'Stomp.over did not receive a factory, auto reconnect will not work. ' +\r\n          'Please see https://stomp-js.github.io/api-docs/latest/classes/Stomp.html#over'\r\n      );\r\n      wsFn = () => ws;\r\n    }\r\n\r\n    return new CompatClient(wsFn);\r\n  }\r\n}\r\n"],
  "mappings": "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",
  "names": ["StompSocketState", "ActivationState", "ReconnectionTimeMode", "TickerStrategy"]
}
